{
  "address": "0xccc2b1aD21666A5847A804a73a41F904C4a4A0Ec",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Pending",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auroraAmount",
          "type": "uint256"
        }
      ],
      "name": "StreamCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StreamOwnerRewardReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "StreamProposalCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDepositAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auroraDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "StreamProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "StreamRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AIRDROP_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FOUR_YEARS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STREAM_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "adminDelegatecall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "flags",
          "type": "uint256"
        }
      ],
      "name": "adminPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "adminSstore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "key",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mask",
          "type": "uint256"
        }
      ],
      "name": "adminSstoreWithMask",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auroraToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchClaimOnBehalfOfAnotherUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchClaimOnBehalfOfOtherUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchMoveRewardsToPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "streamIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancelStreamProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimAllOnBehalfOfAnotherUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "claimAllOnBehalfOfOtherUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "claimOnBehalfOfAnotherUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAmountOfShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getLatestRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getReleaseTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getRewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getRewardPerShareForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdate",
          "type": "uint256"
        }
      ],
      "name": "getRewardsAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "streamOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "auroraDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auroraClaimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardClaimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTimeOwnerClaimed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tau",
          "type": "uint256"
        },
        {
          "internalType": "enum JetStakingV1.StreamStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStreamClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStreamOwnerClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStreamSchedule",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "scheduleTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "scheduleRewards",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStreamsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalAmountOfStakedAurora",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTreasuryBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getUserTotalDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aurora",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "streamOwner",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "scheduleTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "scheduleRewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tauAuroraStream",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_flags",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minWeight",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "moveAllRewardsToPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "moveRewardsToPending",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "streamOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "auroraDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "scheduleTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "scheduleRewards",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tau",
          "type": "uint256"
        }
      ],
      "name": "proposeStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "releaseAuroraRewardsToStreamOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "streamFundReceiver",
          "type": "address"
        }
      ],
      "name": "removeStream",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "rewardsSchedule",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeOnBehalfOfAnotherUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "batchAmount",
          "type": "uint256"
        }
      ],
      "name": "stakeOnBehalfOfOtherUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "startEndScheduleIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmountOfStakedAurora",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAuroraShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStreamShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "touchedAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "auroraShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "streamShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "solcInputHash": "ce94d36f9c4294fc811070edf3788f19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auroraAmount\",\"type\":\"uint256\"}],\"name\":\"StreamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StreamOwnerRewardReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"StreamProposalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDepositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auroraDepositAmount\",\"type\":\"uint256\"}],\"name\":\"StreamProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"StreamRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FOUR_YEARS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STREAM_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"adminDelegatecall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"}],\"name\":\"adminPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"adminSstore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mask\",\"type\":\"uint256\"}],\"name\":\"adminSstoreWithMask\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auroraToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimOnBehalfOfAnotherUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimOnBehalfOfOtherUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"batchMoveRewardsToPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"streamIds\",\"type\":\"uint256[]\"}],\"name\":\"batchWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStreamProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimAllOnBehalfOfAnotherUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"claimAllOnBehalfOfOtherUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"claimOnBehalfOfAnotherUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardTokenAmount\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAmountOfShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getLatestRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getReleaseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getRewardPerShareForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"}],\"name\":\"getRewardsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"streamOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auroraDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auroraClaimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardClaimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTimeOwnerClaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tau\",\"type\":\"uint256\"},{\"internalType\":\"enum JetStakingV1.StreamStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStreamClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStreamOwnerClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStreamSchedule\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"scheduleTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scheduleRewards\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStreamsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAmountOfStakedAurora\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTreasuryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aurora\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"streamOwner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"scheduleTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scheduleRewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tauAuroraStream\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_flags\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minWeight\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moveAllRewardsToPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"moveRewardsToPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"streamOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"auroraDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"scheduleTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scheduleRewards\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tau\",\"type\":\"uint256\"}],\"name\":\"proposeStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"releaseAuroraRewardsToStreamOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"streamFundReceiver\",\"type\":\"address\"}],\"name\":\"removeStream\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"rewardsSchedule\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeOnBehalfOfAnotherUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"batchAmount\",\"type\":\"uint256\"}],\"name\":\"stakeOnBehalfOfOtherUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"startEndScheduleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmountOfStakedAurora\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuroraShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStreamShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"touchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auroraShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"streamShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aurora Team\",\"details\":\"Implementation of Jet staking contract      This contract implements the staking mechanics for AURORA ERC20 token.      A user can stake any amount of AURORA tokens, and get rewarded in both      AURORA and other stream tokens based on the rewards schedules.      Stream rewards can be claimed any time however AURORA can't be claimed      unless the user unstakes his full/partial amount of shares.      This contract is AdminControlled which has a tremendous power. However      hopfully it be governed by a community wallet.\",\"kind\":\"dev\",\"methods\":{\"adminDelegatecall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow\":\"delegatecall\",\"details\":\"adminDelegatecall allows this contract to delegate calls to a target contract and execute it in the context of this contract. Only default admin role can call this function.\",\"params\":{\"data\":\"is the ABI encoded function signature and its values.\",\"target\":\"the target contract address\"}},\"adminPause(uint256)\":{\"details\":\"adminPause pauses this contract. Only pause role or default admin role can access this function.\",\"params\":{\"flags\":\"flags variable is used for pausing this contract.\"}},\"adminSstore(uint256,uint256)\":{\"details\":\"adminSstore updates the state variable value. only default admin role can call this function.\",\"params\":{\"key\":\"is the storage slot of the state variable\",\"value\":\"is the state variable value\"}},\"adminSstoreWithMask(uint256,uint256,uint256)\":{\"details\":\"adminSstoreWithMask similar to adminSstore except it updates the state variable value after xor-ing this value with the old value and the mask, so the new value should be a result of xor(and(xor(value, oldval), mask), oldval). Only default admin role can call this function.\",\"params\":{\"key\":\"is the storage slot of the state variable\",\"mask\":\"this value is used in calculating the new value\",\"value\":\"is the state variable value\"}},\"batchClaimOnBehalfOfAnotherUser(address,uint256[])\":{\"details\":\"batchClaimOnBehalfOfAnotherUser when gas limits prevent users from claiming all.\",\"params\":{\"account\":\"the user account address.\",\"streamIds\":\"to claim.\"}},\"batchClaimOnBehalfOfOtherUsers(address[],uint256[])\":{\"details\":\"Claim all stream rewards on behalf of other users.\",\"params\":{\"accounts\":\"the user account addresses.\"}},\"batchMoveRewardsToPending(uint256[])\":{\"details\":\"moves a set of stream Id rewards to pending. Allows user to select stream ids to claim from UI.\",\"params\":{\"streamIds\":\"stream indexes\"}},\"batchWithdraw(uint256[])\":{\"details\":\"withdraw a set of stream Ids. Allows user to select stream ids to withdraw from UI.\",\"params\":{\"streamIds\":\"to withdraw.\"}},\"cancelStreamProposal(uint256)\":{\"details\":\"cancelStreamProposal cancels a proposal any time before the stream becomes active (created).\",\"params\":{\"streamId\":\"the stream index\"}},\"claimAllOnBehalfOfAnotherUser(address)\":{\"details\":\"Claim all stream rewards on behalf of another user.\",\"params\":{\"account\":\"the user account address.\"}},\"claimAllOnBehalfOfOtherUsers(address[])\":{\"details\":\"Claim all stream rewards on behalf of other users.\",\"params\":{\"accounts\":\"the user account addresses.\"}},\"claimOnBehalfOfAnotherUser(address,uint256)\":{\"details\":\"Claim a stream's rewards on behalf of another user.\",\"params\":{\"account\":\"the user account address.\",\"streamId\":\"to claim.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"createStream(uint256,uint256)\":{\"details\":\"create new stream (only stream owner) stream owner must approve reward tokens to this contract.\",\"params\":{\"streamId\":\"stream id\"}},\"getAmountOfShares(uint256,address)\":{\"details\":\"gets a user stream shares\",\"params\":{\"account\":\"the user address\",\"streamId\":\"stream index\"},\"returns\":{\"_0\":\"user stream shares\"}},\"getLatestRewardPerShare(uint256)\":{\"details\":\"calculates and gets the latest reward per share (RPS) for a stream\",\"params\":{\"streamId\":\"stream index\"},\"returns\":{\"_0\":\"streams[streamId].rps + scheduled reward up till now\"}},\"getPending(uint256,address)\":{\"details\":\"gets the user's stream pending reward\",\"params\":{\"account\":\"user account\",\"streamId\":\"stream index\"},\"returns\":{\"_0\":\"user.pendings[streamId]\"}},\"getReleaseTime(uint256,address)\":{\"details\":\"gets the user's stream reward release time\",\"params\":{\"account\":\"user account\",\"streamId\":\"stream index\"},\"returns\":{\"_0\":\"user.releaseTime[streamId]\"}},\"getRewardPerShare(uint256)\":{\"details\":\"gets reward per share (RPS) for a stream\",\"params\":{\"streamId\":\"stream index\"},\"returns\":{\"_0\":\"streams[streamId].rps\"}},\"getRewardPerShareForUser(uint256,address)\":{\"details\":\"gets the user's reward per share (RPS) for a stream\",\"params\":{\"streamId\":\"stream index\"},\"returns\":{\"_0\":\"user.rpsDuringLastClaim[streamId]\"}},\"getRewardsAmount(uint256,uint256)\":{\"details\":\"calculates and gets the latest released rewards.\",\"params\":{\"streamId\":\"stream index\"},\"returns\":{\"_0\":\"rewards released since last update.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStream(uint256)\":{\"details\":\"get the stream data\",\"params\":{\"streamId\":\"the stream index\"}},\"getStreamClaimableAmount(uint256,address)\":{\"details\":\"gets the user's stream claimable amount\",\"params\":{\"streamId\":\"stream index\"},\"returns\":{\"_0\":\"(latesRPS - user.rpsDuringLastClaim) * user.shares\"}},\"getStreamOwnerClaimableAmount(uint256)\":{\"details\":\"Stream owner claimable AURORA.\",\"params\":{\"streamId\":\"the stream index\"}},\"getStreamSchedule(uint256)\":{\"details\":\"get the stream schedule data\",\"params\":{\"streamId\":\"the stream index\"}},\"getStreamsCount()\":{\"details\":\"get the streams count\",\"returns\":{\"_0\":\"streams.length\"}},\"getTotalAmountOfStakedAurora()\":{\"details\":\"gets the total amount of staked aurora\",\"returns\":{\"_0\":\"totalAmountOfStakedAurora + latest reward schedule\"}},\"getTreasuryBalance(address)\":{\"details\":\"Get the treasury balance\",\"params\":{\"token\":\"the token address\"}},\"getUserShares(address)\":{\"details\":\"gets the user shares\",\"params\":{\"account\":\"the user address\"},\"returns\":{\"_0\":\"user shares\"}},\"getUserTotalDeposit(address)\":{\"details\":\"gets the total user deposit\",\"params\":{\"account\":\"the user address\"},\"returns\":{\"_0\":\"user total deposit in (AURORA)\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(address,address,uint256[],uint256[],uint256,uint256,address,uint256,uint256)\":{\"details\":\"initialize the contract and deploys the first stream (AURORA)\",\"params\":{\"_flags\":\"admin controlled contract flags\",\"_maxWeight\":\"max stream reward weighting coefficient\",\"_minWeight\":\"min stream reward weighting coefficient\",\"_treasury\":\"the Aurora treasury contract address\",\"aurora\":\"token contract address\",\"scheduleRewards\":\"init the schedule amounts\",\"scheduleTimes\":\"init the schedule time\",\"tauAuroraStream\":\"release time constant per stream (e.g AURORA stream)\"}},\"moveAllRewardsToPending()\":{\"details\":\"moves all the user rewards to pending reward.\"},\"moveRewardsToPending(uint256)\":{\"details\":\"moves the reward for specific stream Id to pending rewards. It will require a waiting time untill it get released. Users call this in function in order to claim rewards.\",\"params\":{\"streamId\":\"stream index\"}},\"proposeStream(address,address,uint256,uint256,uint256,uint256[],uint256[],uint256)\":{\"details\":\"An admin of the staking contract can whitelist (propose) a stream. Whitelisting of the stream provides the option for the stream owner (presumably the issuing party of a specific token) to deposit some ERC-20 tokens on the staking contract and potentially get in return some AURORA tokens. Deposited ERC-20 tokens will be distributed to the stakers over some period of time.\",\"params\":{\"auroraDepositAmount\":\"Amount of the AURORA deposited by the Admin.\",\"maxDepositAmount\":\"The upper amount of the tokens that should be deposited by the stream owner\",\"rewardToken\":\"the address of the ERC-20 tokens to be deposited in the stream\",\"scheduleRewards\":\"remaining rewards to be delivered at the beginning of each scheduled interval. Last element is always zero. First value (in scheduleRewards) from array is supposed to be a total amount of rewards for stream.\",\"scheduleTimes\":\"timestamp denoting the start of each scheduled interval. Last element is the end of the stream.\",\"streamOwner\":\"only this account would be able to create a stream\",\"tau\":\"the tau is (pending release period) for this stream (e.g one day)\"}},\"releaseAuroraRewardsToStreamOwner(uint256)\":{\"details\":\"the release of AURORA tokens to the stream owner is subjected to the same schedule as rewards. Thus if for a specific moment in time 30% of the rewards are distributed, then it means that 30% of the AURORA deposit can be withdrawn by the stream owner too. called by the stream owner\",\"params\":{\"streamId\":\"the stream index\"}},\"removeStream(uint256,address)\":{\"details\":\"removes a stream (only default admin role)\",\"params\":{\"streamFundReceiver\":\"receives the rest of the reward tokens in the stream\",\"streamId\":\"stream index\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"rewardsSchedule(uint256,uint256,uint256)\":{\"details\":\"calculate the total amount of the released tokens within a period (start & end)\",\"params\":{\"end\":\"is the end timestamp (e.g block.timestamp .. now)\",\"start\":\"is the start timestamp within the schedule\",\"streamId\":\"the stream index\"},\"returns\":{\"_0\":\"amount of the released tokens for that period\"}},\"stake(uint256)\":{\"details\":\"a user stakes amount of AURORA tokens The user should approve these tokens to the treasury contract in order to complete the stake.\",\"params\":{\"amount\":\"is the AURORA amount.\"}},\"stakeOnBehalfOfAnotherUser(address,uint256)\":{\"details\":\"stakeOnBehalfOfAnotherUser is called for airdropping Aurora users\",\"params\":{\"account\":\"the account address\",\"amount\":\"in AURORA tokens WARNING: rewards are not claimed during stake. Airdrop script must claim or only distribute to accounts without stake\"}},\"stakeOnBehalfOfOtherUsers(address[],uint256[],uint256)\":{\"details\":\"stakeOnBehalfOfOtherUsers called for airdropping Aurora users\",\"params\":{\"accounts\":\"the account address\",\"amounts\":\"in AURORA tokens\",\"batchAmount\":\"equals to the sum of amounts WARNING: rewards are not claimed during stake. Airdrop script must claim or only distribute to accounts without stake\"}},\"startEndScheduleIndex(uint256,uint256,uint256)\":{\"details\":\"gets start index and end index in a stream schedule\",\"params\":{\"end\":\"end time (in seconds)\",\"start\":\"start time (in seconds)\",\"streamId\":\"stream index\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unstake(uint256)\":{\"details\":\"unstake amount from user shares value. The rest is re-staked\",\"params\":{\"amount\":\"to unstake\"}},\"unstakeAll()\":{\"details\":\"unstake all the user's shares\"},\"updateTreasury(address)\":{\"details\":\"restricted for the admin only. Admin should pause this contract before changing the treasury address by setting the pause =1 (for changing this variable, call adminPause(1))\",\"params\":{\"_treasury\":\"treasury contract address for the reward tokens\"}},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(uint256)\":{\"details\":\"withdraw amount in the pending pool. User should wait for pending time (tau constant) in order to be able to withdraw.\",\"params\":{\"streamId\":\"stream index\"}},\"withdrawAll()\":{\"details\":\"withdraw all claimed balances which have passed pending periode. This function will reach gas limit with too many streams, so the frontend will allow individual stream withdrawals and disable withdrawAll.\"}},\"title\":\"JetStakingV1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStream(uint256)\":{\"notice\":\"this function doesn't return the stream schedule due to some stake slots limitations. To get the stream schedule, refer to getStreamSchedule\"},\"initialize(address,address,uint256[],uint256[],uint256,uint256,address,uint256,uint256)\":{\"notice\":\"By calling this function, the deployer of this contract must make sure that the AURORA reward amount was deposited to the treasury contract before initializing of the default AURORA stream.\"},\"proposeStream(address,address,uint256,uint256,uint256,uint256[],uint256[],uint256)\":{\"notice\":\"treasury manager must call\"},\"updateTreasury(address)\":{\"notice\":\"updates treasury account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JetStakingV1.sol\":\"JetStakingV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x64bb2dbe7ec4fcadb2f163f41edf6f2e1cd8f16162f7a56c2581894e6ba0747c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xba3e051005a0b7f77c465dbcfe6366ce6a72e3845028277e1f794e5e8864e017\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xed65883d4af8d00c76ff9f1b7758c5d8ac4ab82da60f9743c74d31b754b06bc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x422c3d27d0d5681cea93acbb0dcb175fa5b461b5b7731da7ff77e51f0f0174c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/AdminControlled.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @title AdminControlled\\n * @author Aurora Team\\n *\\n * @dev Implementation of Admin controlled contract\\n *\\n *      This contract implements inherits access control upgradeable contract,\\n *      in which provides a role based access control (RBAC) for admin priveleges.\\n *      It also provides other privileges such as:\\n *      - Pausing the contract\\n *      - Delegating contract calls to trusted targets (only managed by the default admin role)\\n *      - Changing state variable value using its storage slot\\n *      - Role management using AccessControlled ABIs\\n */\\ncontract AdminControlled is UUPSUpgradeable, AccessControlUpgradeable {\\n    uint256 public paused;\\n    bytes32 public constant PAUSE_ROLE = keccak256(\\\"PAUSE_ROLE\\\");\\n\\n    modifier pausable(uint256 flag) {\\n        require(\\n            (paused & flag) == 0 || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"CONTRACT_IS_PAUSED\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev __AdminControlled_init initializes this contract, setting pause flags\\n    /// and granting admin and pause roles.\\n    /// @param _flags flags variable will be used for pausing this contract.\\n    /// the default flags value is zero.\\n    function __AdminControlled_init(uint256 _flags) internal {\\n        __UUPSUpgradeable_init();\\n        __AccessControl_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSE_ROLE, msg.sender);\\n        paused = _flags;\\n    }\\n\\n    /// @dev adminPause pauses this contract. Only pause role or default\\n    /// admin role can access this function.\\n    /// @param flags flags variable is used for pausing this contract.\\n    function adminPause(uint256 flags) external onlyRole(PAUSE_ROLE) {\\n        // pause role can pause the contract, however only default admin role can unpause\\n        require(\\n            (paused & flags) == paused ||\\n                hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"ONLY_DEFAULT_ADMIN_CAN_UNPAUSE\\\"\\n        );\\n        paused = flags;\\n    }\\n\\n    /// @dev adminSstore updates the state variable value.\\n    /// only default admin role can call this function.\\n    /// @param key is the storage slot of the state variable\\n    /// @param value is the state variable value\\n    function adminSstore(uint256 key, uint256 value)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        assembly {\\n            sstore(key, value)\\n        }\\n    }\\n\\n    /// @dev adminSstoreWithMask similar to adminSstore except\\n    /// it updates the state variable value after xor-ing this value\\n    /// with the old value and the mask, so the new value should be\\n    /// a result of xor(and(xor(value, oldval), mask), oldval).\\n    /// Only default admin role can call this function.\\n    /// @param key is the storage slot of the state variable\\n    /// @param value is the state variable value\\n    /// @param mask this value is used in calculating the new value\\n    function adminSstoreWithMask(\\n        uint256 key,\\n        uint256 value,\\n        uint256 mask\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        assembly {\\n            let oldval := sload(key)\\n            sstore(key, xor(and(xor(value, oldval), mask), oldval))\\n        }\\n    }\\n\\n    /// @dev adminDelegatecall allows this contract to delegate calls\\n    /// to a target contract and execute it in the context of this\\n    /// contract. Only default admin role can call this function.\\n    /// @param target the target contract address\\n    /// @param data is the ABI encoded function signature and its values.\\n    /// @custom:oz-upgrades-unsafe-allow delegatecall\\n    function adminDelegatecall(address target, bytes memory data)\\n        external\\n        payable\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        returns (bytes memory)\\n    {\\n        require(target != address(0), \\\"ZERO_ADDRESS\\\");\\n        (bool success, bytes memory rdata) = target.delegatecall(data);\\n        require(success);\\n        return rdata;\\n    }\\n\\n    ///@dev required by the OZ UUPS module\\n    function _authorizeUpgrade(address)\\n        internal\\n        override\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {}\\n}\\n\",\"keccak256\":\"0xf4c94113feb987161b614def1071aeb1eb0b4a0bef6ae7056810f7475a1b9a9e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\ninterface ITreasury {\\n    function payRewards(\\n        address _user,\\n        address _token,\\n        uint256 _deposit\\n    ) external;\\n\\n    function isSupportedToken(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xca39bf1deab26e02710ebdd852903508b70a2f9ca4de1e61d97e7f6ef63d4e05\",\"license\":\"MIT\"},\"contracts/JetStakingV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"./ITreasury.sol\\\";\\nimport \\\"./AdminControlled.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\n/**\\n * @title JetStakingV1\\n * @author Aurora Team\\n *\\n * @dev Implementation of Jet staking contract\\n *\\n *      This contract implements the staking mechanics for AURORA ERC20 token.\\n *      A user can stake any amount of AURORA tokens, and get rewarded in both\\n *      AURORA and other stream tokens based on the rewards schedules.\\n *      Stream rewards can be claimed any time however AURORA can't be claimed\\n *      unless the user unstakes his full/partial amount of shares.\\n *\\n *      This contract is AdminControlled which has a tremendous power. However\\n *      hopfully it be governed by a community wallet.\\n */\\ncontract JetStakingV1 is AdminControlled {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    bytes32 public constant AIRDROP_ROLE = keccak256(\\\"AIRDROP_ROLE\\\");\\n    bytes32 public constant CLAIM_ROLE = keccak256(\\\"CLAIM_ROLE\\\");\\n    bytes32 public constant STREAM_MANAGER_ROLE =\\n        keccak256(\\\"STREAM_MANAGER_ROLE\\\");\\n    uint256 public constant ONE_MONTH = 2629746;\\n    uint256 public constant FOUR_YEARS = 126227808;\\n    // RPS_MULTIPLIER = Aurora_max_supply x weight(1000) * 10 (large enough to always release rewards) =\\n    // 10**9 * 10**18 * 10**3 * 10= 10**31\\n    uint256 private constant RPS_MULTIPLIER = 1e31;\\n    uint256 public totalAmountOfStakedAurora;\\n    uint256 public touchedAt;\\n    uint256 public totalAuroraShares;\\n    uint256 public totalStreamShares;\\n    address public treasury;\\n    address public auroraToken;\\n    uint256 public maxWeight;\\n    uint256 public minWeight;\\n\\n    enum StreamStatus {\\n        INACTIVE,\\n        PROPOSED,\\n        ACTIVE\\n    }\\n\\n    struct User {\\n        uint256 deposit;\\n        uint256 auroraShares;\\n        uint256 streamShares;\\n        mapping(uint256 => uint256) pendings; // The amount of tokens pending release for user per stream\\n        mapping(uint256 => uint256) releaseTime; // The release moment per stream\\n        mapping(uint256 => uint256) rpsDuringLastClaim; // RPS or reward per share during the previous rewards claim\\n    }\\n\\n    struct Schedule {\\n        uint256[] time;\\n        uint256[] reward;\\n    }\\n\\n    struct Stream {\\n        address owner; // stream owned by the ERC-20 reward token owner\\n        address manager; // stream manager handled by AURORA stream manager role\\n        address rewardToken;\\n        uint256 auroraDepositAmount;\\n        uint256 auroraClaimedAmount;\\n        uint256 rewardDepositAmount;\\n        uint256 rewardClaimedAmount;\\n        uint256 maxDepositAmount;\\n        uint256 minDepositAmount;\\n        uint256 lastTimeOwnerClaimed;\\n        uint256 tau; // pending time prior reward release\\n        uint256 rps; // Reward per share for a stream j>0\\n        Schedule schedule;\\n        StreamStatus status;\\n    }\\n\\n    mapping(address => User) public users;\\n    Stream[] streams;\\n\\n    // events\\n    event Staked(address indexed user, uint256 amount, uint256 shares);\\n\\n    event Unstaked(address indexed user, uint256 amount);\\n\\n    event Pending(\\n        uint256 indexed streamId,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event Released(\\n        uint256 indexed streamId,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event StreamOwnerRewardReleased(\\n        uint256 indexed streamId,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    event StreamProposed(\\n        uint256 indexed streamId,\\n        address indexed owner,\\n        address indexed token,\\n        uint256 maxDepositAmount,\\n        uint256 auroraDepositAmount\\n    );\\n\\n    event StreamProposalCancelled(\\n        uint256 indexed streamId,\\n        address indexed owner,\\n        address indexed token\\n    );\\n\\n    event StreamCreated(\\n        uint256 indexed streamId,\\n        address indexed owner,\\n        address indexed token,\\n        uint256 tokenAmount,\\n        uint256 auroraAmount\\n    );\\n\\n    event StreamRemoved(\\n        uint256 indexed streamId,\\n        address indexed owner,\\n        address indexed token\\n    );\\n\\n    modifier onlyValidSharesAmount() {\\n        require(totalAuroraShares != 0, \\\"ZERO_TOTAL_AURORA_SHARES\\\");\\n        require(users[msg.sender].auroraShares != 0, \\\"ZERO_USER_SHARES\\\");\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    /// @dev initialize the contract and deploys the first stream (AURORA)\\n    /// @notice By calling this function, the deployer of this contract must\\n    /// make sure that the AURORA reward amount was deposited to the treasury\\n    /// contract before initializing of the default AURORA stream.\\n    /// @param aurora token contract address\\n    /// @param scheduleTimes init the schedule time\\n    /// @param scheduleRewards init the schedule amounts\\n    /// @param tauAuroraStream release time constant per stream (e.g AURORA stream)\\n    /// @param _flags admin controlled contract flags\\n    /// @param _treasury the Aurora treasury contract address\\n    /// @param _maxWeight max stream reward weighting coefficient\\n    /// @param _minWeight min stream reward weighting coefficient\\n    function initialize(\\n        address aurora,\\n        address streamOwner,\\n        uint256[] memory scheduleTimes,\\n        uint256[] memory scheduleRewards,\\n        uint256 tauAuroraStream,\\n        uint256 _flags,\\n        address _treasury,\\n        uint256 _maxWeight,\\n        uint256 _minWeight\\n    ) external initializer {\\n        require(_maxWeight > _minWeight, \\\"INVALID_WEIGHTS\\\");\\n        require(_treasury != address(0), \\\"INVALID_ADDRESS\\\");\\n        _validateStreamParameters(\\n            streamOwner,\\n            aurora,\\n            scheduleRewards[0],\\n            scheduleRewards[0],\\n            scheduleTimes,\\n            scheduleRewards,\\n            tauAuroraStream\\n        );\\n        // check aurora token address is supportedToken in the treasury\\n        require(\\n            ITreasury(_treasury).isSupportedToken(aurora),\\n            \\\"INVALID_SUPPORTED_TOKEN_ADDRESS\\\"\\n        );\\n        __AdminControlled_init(_flags);\\n        _grantRole(AIRDROP_ROLE, msg.sender);\\n        _grantRole(CLAIM_ROLE, msg.sender);\\n        _grantRole(STREAM_MANAGER_ROLE, msg.sender);\\n        treasury = _treasury;\\n        auroraToken = aurora;\\n        maxWeight = _maxWeight;\\n        minWeight = _minWeight;\\n        //init AURORA default stream\\n        // This is a special stream where the reward token is the aurora token itself.\\n        uint256 streamId = 0;\\n        Schedule memory schedule = Schedule(scheduleTimes, scheduleRewards);\\n        streams.push(\\n            Stream({\\n                owner: streamOwner,\\n                manager: streamOwner,\\n                rewardToken: aurora,\\n                auroraDepositAmount: 0,\\n                auroraClaimedAmount: 0,\\n                maxDepositAmount: 0,\\n                minDepositAmount: 0,\\n                rewardDepositAmount: 0,\\n                rewardClaimedAmount: 0,\\n                lastTimeOwnerClaimed: block.timestamp,\\n                schedule: schedule,\\n                status: StreamStatus.ACTIVE,\\n                tau: tauAuroraStream,\\n                rps: 0\\n            })\\n        );\\n        emit StreamProposed(\\n            streamId,\\n            streamOwner,\\n            aurora,\\n            scheduleRewards[0],\\n            scheduleRewards[0]\\n        );\\n        emit StreamCreated(\\n            streamId,\\n            streamOwner,\\n            aurora,\\n            scheduleRewards[0],\\n            scheduleRewards[0]\\n        );\\n    }\\n\\n    /// @dev An admin of the staking contract can whitelist (propose) a stream.\\n    /// Whitelisting of the stream provides the option for the stream\\n    /// owner (presumably the issuing party of a specific token) to\\n    /// deposit some ERC-20 tokens on the staking contract and potentially\\n    /// get in return some AURORA tokens. Deposited ERC-20 tokens will be\\n    /// distributed to the stakers over some period of time.\\n    /// @notice treasury manager must call\\n    /// @param streamOwner only this account would be able to create a stream\\n    /// @param rewardToken the address of the ERC-20 tokens to be deposited in the stream\\n    /// @param auroraDepositAmount Amount of the AURORA deposited by the Admin.\\n    /// @param maxDepositAmount The upper amount of the tokens that should be deposited by the stream owner\\n    /// @param scheduleTimes timestamp denoting the start of each scheduled interval. Last element is the end of the stream.\\n    /// @param scheduleRewards remaining rewards to be delivered at the beginning of each scheduled interval. Last element is always zero.\\n    /// First value (in scheduleRewards) from array is supposed to be a total amount of rewards for stream.\\n    /// @param tau the tau is (pending release period) for this stream (e.g one day)\\n    function proposeStream(\\n        address streamOwner,\\n        address rewardToken,\\n        uint256 auroraDepositAmount,\\n        uint256 maxDepositAmount,\\n        uint256 minDepositAmount,\\n        uint256[] memory scheduleTimes,\\n        uint256[] memory scheduleRewards,\\n        uint256 tau\\n    ) external onlyRole(STREAM_MANAGER_ROLE) {\\n        _validateStreamParameters(\\n            streamOwner,\\n            rewardToken,\\n            maxDepositAmount,\\n            minDepositAmount,\\n            scheduleTimes,\\n            scheduleRewards,\\n            tau\\n        );\\n        // check aurora token address is supportedToken in the treasury\\n        require(\\n            ITreasury(treasury).isSupportedToken(rewardToken),\\n            \\\"INVALID_SUPPORTED_TOKEN_ADDRESS\\\"\\n        );\\n        Schedule memory schedule = Schedule(scheduleTimes, scheduleRewards);\\n        uint256 streamId = streams.length;\\n        streams.push(\\n            Stream({\\n                owner: streamOwner,\\n                manager: msg.sender,\\n                rewardToken: rewardToken,\\n                auroraDepositAmount: auroraDepositAmount,\\n                auroraClaimedAmount: 0,\\n                maxDepositAmount: maxDepositAmount,\\n                minDepositAmount: minDepositAmount,\\n                rewardDepositAmount: 0,\\n                rewardClaimedAmount: 0,\\n                lastTimeOwnerClaimed: scheduleTimes[0],\\n                schedule: schedule,\\n                status: StreamStatus.PROPOSED,\\n                tau: tau,\\n                rps: 0\\n            })\\n        );\\n        emit StreamProposed(\\n            streamId,\\n            streamOwner,\\n            rewardToken,\\n            maxDepositAmount,\\n            auroraDepositAmount\\n        );\\n        IERC20Upgradeable(auroraToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            auroraDepositAmount\\n        );\\n    }\\n\\n    /// @dev cancelStreamProposal cancels a proposal any time before the stream\\n    /// becomes active (created).\\n    /// @param streamId the stream index\\n    function cancelStreamProposal(uint256 streamId)\\n        external\\n        onlyRole(STREAM_MANAGER_ROLE)\\n    {\\n        Stream storage stream = streams[streamId];\\n        require(stream.status == StreamStatus.PROPOSED, \\\"STREAM_NOT_PROPOSED\\\");\\n        // cancel the proposal\\n        stream.status = StreamStatus.INACTIVE;\\n        uint256 refundAmount = stream.auroraDepositAmount;\\n        stream.auroraDepositAmount = 0;\\n        emit StreamProposalCancelled(\\n            streamId,\\n            stream.owner,\\n            stream.rewardToken\\n        );\\n        // refund stream manager wallet with the stream aurora deposit\\n        IERC20Upgradeable(auroraToken).safeTransfer(\\n            stream.manager,\\n            refundAmount\\n        );\\n    }\\n\\n    /// @dev create new stream (only stream owner)\\n    /// stream owner must approve reward tokens to this contract.\\n    /// @param streamId stream id\\n    function createStream(uint256 streamId, uint256 rewardTokenAmount)\\n        external\\n        pausable(1)\\n    {\\n        Stream storage stream = streams[streamId];\\n        require(stream.status == StreamStatus.PROPOSED, \\\"STREAM_NOT_PROPOSED\\\");\\n        require(stream.owner == msg.sender, \\\"INVALID_STREAM_OWNER\\\");\\n        require(\\n            stream.schedule.time[0] >= block.timestamp,\\n            \\\"STREAM_PROPOSAL_EXPIRED\\\"\\n        );\\n        require(\\n            rewardTokenAmount <= stream.maxDepositAmount,\\n            \\\"REWARD_TOO_HIGH\\\"\\n        );\\n        require(rewardTokenAmount >= stream.minDepositAmount, \\\"REWARD_TOO_LOW\\\");\\n        stream.status = StreamStatus.ACTIVE;\\n        stream.rewardDepositAmount = rewardTokenAmount;\\n        if (rewardTokenAmount < stream.maxDepositAmount) {\\n            // refund staking admin if deposited reward tokens less than the upper limit of deposit\\n            uint256 newAuroraDepositAmount = (rewardTokenAmount *\\n                stream.auroraDepositAmount) / stream.maxDepositAmount;\\n            uint256 refundAuroraAmount = stream.auroraDepositAmount -\\n                newAuroraDepositAmount;\\n            stream.auroraDepositAmount = newAuroraDepositAmount;\\n            // update stream reward schedules\\n            _updateStreamRewardSchedules(streamId, rewardTokenAmount);\\n            IERC20Upgradeable(auroraToken).safeTransfer(\\n                stream.manager,\\n                refundAuroraAmount\\n            );\\n        }\\n        emit StreamCreated(\\n            streamId,\\n            stream.owner,\\n            stream.rewardToken,\\n            rewardTokenAmount,\\n            stream.auroraDepositAmount\\n        );\\n        require(\\n            stream.schedule.reward[0] == stream.rewardDepositAmount,\\n            \\\"INVALID_STARTING_REWARD\\\"\\n        );\\n        // move Aurora tokens to treasury\\n        IERC20Upgradeable(auroraToken).safeTransfer(\\n            address(treasury),\\n            stream.auroraDepositAmount\\n        );\\n        // move reward tokens to treasury\\n        IERC20Upgradeable(stream.rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(treasury),\\n            rewardTokenAmount\\n        );\\n    }\\n\\n    /// @dev Get the treasury balance\\n    /// @param token the token address\\n    function getTreasuryBalance(address token) public view returns (uint256) {\\n        return IERC20Upgradeable(token).balanceOf(treasury);\\n    }\\n\\n    /// @dev removes a stream (only default admin role)\\n    /// @param streamId stream index\\n    /// @param streamFundReceiver receives the rest of the reward tokens in the stream\\n    function removeStream(uint256 streamId, address streamFundReceiver)\\n        external\\n        onlyRole(STREAM_MANAGER_ROLE)\\n    {\\n        require(streamId != 0, \\\"AURORA_STREAM_NOT_REMOVABLE\\\");\\n        Stream storage stream = streams[streamId];\\n        require(stream.status == StreamStatus.ACTIVE, \\\"STREAM_ALREADY_REMOVED\\\");\\n        stream.status = StreamStatus.INACTIVE;\\n        emit StreamRemoved(streamId, stream.owner, stream.rewardToken);\\n        uint256 releaseAuroraAmount = stream.auroraDepositAmount -\\n            stream.auroraClaimedAmount;\\n        uint256 releaseRewardAmount = stream.rewardDepositAmount -\\n            stream.rewardClaimedAmount;\\n        // check enough treasury balance\\n        uint256 auroraTreasury = getTreasuryBalance(auroraToken);\\n        uint256 rewardTreasury = getTreasuryBalance(stream.rewardToken);\\n        // move rest of the unclaimed aurora to the stream manager\\n        ITreasury(treasury).payRewards(\\n            stream.manager,\\n            auroraToken,\\n            releaseAuroraAmount <= auroraTreasury\\n                ? releaseAuroraAmount\\n                : auroraTreasury // should not happen\\n        );\\n        // move the rest of rewards to the stream owner\\n        ITreasury(treasury).payRewards(\\n            streamFundReceiver,\\n            stream.rewardToken,\\n            releaseRewardAmount <= rewardTreasury\\n                ? releaseRewardAmount\\n                : rewardTreasury // should not happen\\n        );\\n    }\\n\\n    /// @dev Stream owner claimable AURORA.\\n    /// @param streamId the stream index\\n    function getStreamOwnerClaimableAmount(uint256 streamId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        Stream storage stream = streams[streamId];\\n        if (stream.status != StreamStatus.ACTIVE) return 0;\\n        uint256 scheduledReward = getRewardsAmount(\\n            streamId,\\n            stream.lastTimeOwnerClaimed\\n        );\\n        return\\n            (scheduledReward * stream.auroraDepositAmount) /\\n            stream.rewardDepositAmount;\\n    }\\n\\n    /// @dev the release of AURORA tokens to the stream owner is subjected to the same schedule as rewards.\\n    /// Thus if for a specific moment in time 30% of the rewards are distributed, then it means that 30% of\\n    /// the AURORA deposit can be withdrawn by the stream owner too.\\n    /// called by the stream owner\\n    /// @param streamId the stream index\\n    function releaseAuroraRewardsToStreamOwner(uint256 streamId)\\n        external\\n        pausable(1)\\n    {\\n        require(streamId != 0, \\\"AURORA_STREAM_NA\\\");\\n        Stream storage stream = streams[streamId];\\n        require(msg.sender == stream.owner, \\\"INVALID_STREAM_OWNER\\\");\\n        require(\\n            stream.status == StreamStatus.ACTIVE,\\n            \\\"INACTIVE_OR_PROPOSED_STREAM\\\"\\n        );\\n        uint256 auroraStreamOwnerReward = getStreamOwnerClaimableAmount(\\n            streamId\\n        );\\n        require(auroraStreamOwnerReward > 0, \\\"ZERO_REWARDS\\\");\\n        stream.lastTimeOwnerClaimed = block.timestamp;\\n        stream.auroraClaimedAmount += auroraStreamOwnerReward;\\n        // check enough treasury balance\\n        emit StreamOwnerRewardReleased(\\n            streamId,\\n            stream.owner,\\n            auroraStreamOwnerReward\\n        );\\n        ITreasury(treasury).payRewards(\\n            stream.owner,\\n            auroraToken,\\n            auroraStreamOwnerReward\\n        );\\n    }\\n\\n    /// @dev get the stream data\\n    /// @notice this function doesn't return the stream\\n    /// schedule due to some stake slots limitations. To\\n    /// get the stream schedule, refer to getStreamSchedule\\n    /// @param streamId the stream index\\n    function getStream(uint256 streamId)\\n        external\\n        view\\n        returns (\\n            address streamOwner,\\n            address rewardToken,\\n            uint256 auroraDepositAmount,\\n            uint256 auroraClaimedAmount,\\n            uint256 rewardDepositAmount,\\n            uint256 rewardClaimedAmount,\\n            uint256 maxDepositAmount,\\n            uint256 lastTimeOwnerClaimed,\\n            uint256 rps,\\n            uint256 tau,\\n            StreamStatus status\\n        )\\n    {\\n        Stream storage stream = streams[streamId];\\n        return (\\n            stream.owner,\\n            stream.rewardToken,\\n            stream.auroraDepositAmount,\\n            stream.auroraClaimedAmount,\\n            stream.rewardDepositAmount,\\n            stream.rewardClaimedAmount,\\n            stream.maxDepositAmount,\\n            stream.lastTimeOwnerClaimed,\\n            stream.rps,\\n            stream.tau,\\n            stream.status\\n        );\\n    }\\n\\n    /// @dev get the stream schedule data\\n    /// @param streamId the stream index\\n    function getStreamSchedule(uint256 streamId)\\n        external\\n        view\\n        returns (\\n            uint256[] memory scheduleTimes,\\n            uint256[] memory scheduleRewards\\n        )\\n    {\\n        return (\\n            streams[streamId].schedule.time,\\n            streams[streamId].schedule.reward\\n        );\\n    }\\n\\n    /// @dev get the streams count\\n    /// @return streams.length\\n    function getStreamsCount() external view returns (uint256) {\\n        return streams.length;\\n    }\\n\\n    /// @notice updates treasury account\\n    /// @dev restricted for the admin only. Admin should pause this\\n    /// contract before changing the treasury address by setting the\\n    /// pause =1 (for changing this variable, call adminPause(1))\\n    /// @param _treasury treasury contract address for the reward tokens\\n    function updateTreasury(address _treasury)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        // enforce pausing this contract before updating the address.\\n        // This mitigates the risk of future invalid reward claims\\n        require(paused != 0, \\\"REQUIRE_PAUSE\\\");\\n        require(_treasury != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(_treasury != treasury, \\\"SAME_ADDRESS\\\");\\n        treasury = _treasury;\\n    }\\n\\n    /// @dev stakeOnBehalfOfOtherUsers called for airdropping Aurora users\\n    /// @param accounts the account address\\n    /// @param amounts in AURORA tokens\\n    /// @param batchAmount equals to the sum of amounts\\n    /// WARNING: rewards are not claimed during stake. Airdrop script must claim or\\n    /// only distribute to accounts without stake\\n    function stakeOnBehalfOfOtherUsers(\\n        address[] calldata accounts,\\n        uint256[] calldata amounts,\\n        uint256 batchAmount\\n    ) external pausable(1) onlyRole(AIRDROP_ROLE) {\\n        uint256 accountsLength = accounts.length;\\n        require(accountsLength == amounts.length, \\\"INVALID_ARRAY_LENGTH\\\");\\n        _before();\\n        uint256 totalAmount = 0;\\n        for (uint256 i = 0; i < accountsLength; i++) {\\n            totalAmount += amounts[i];\\n            _stake(accounts[i], amounts[i]);\\n        }\\n        require(totalAmount == batchAmount, \\\"INVALID_BATCH_AMOUNT\\\");\\n        IERC20Upgradeable(auroraToken).safeTransferFrom(\\n            msg.sender,\\n            address(treasury),\\n            batchAmount\\n        );\\n    }\\n\\n    /// @dev stakeOnBehalfOfAnotherUser is called for airdropping Aurora users\\n    /// @param account the account address\\n    /// @param amount in AURORA tokens\\n    /// WARNING: rewards are not claimed during stake. Airdrop script must claim or\\n    /// only distribute to accounts without stake\\n    function stakeOnBehalfOfAnotherUser(address account, uint256 amount)\\n        external\\n        pausable(1)\\n        onlyRole(AIRDROP_ROLE)\\n    {\\n        _before();\\n        _stake(account, amount);\\n        IERC20Upgradeable(auroraToken).safeTransferFrom(\\n            msg.sender,\\n            address(treasury),\\n            amount\\n        );\\n    }\\n\\n    /// @dev moves the reward for specific stream Id to pending rewards.\\n    /// It will require a waiting time untill it get released. Users call\\n    /// this in function in order to claim rewards.\\n    /// @param streamId stream index\\n    function moveRewardsToPending(uint256 streamId) external pausable(1) {\\n        _before();\\n        _moveRewardsToPending(msg.sender, streamId);\\n    }\\n\\n    /// @dev moves all the user rewards to pending reward.\\n    function moveAllRewardsToPending() external pausable(1) {\\n        _before();\\n        // Claim all streams while skipping inactive streams.\\n        _moveAllRewardsToPending(msg.sender);\\n    }\\n\\n    /// @dev moves a set of stream Id rewards to pending.\\n    /// Allows user to select stream ids to claim from UI.\\n    /// @param streamIds stream indexes\\n    function batchMoveRewardsToPending(uint256[] calldata streamIds)\\n        external\\n        pausable(1)\\n    {\\n        _before();\\n        _batchClaimRewards(msg.sender, streamIds);\\n    }\\n\\n    /// @dev Claim a stream's rewards on behalf of another user.\\n    /// @param account the user account address.\\n    /// @param streamId to claim.\\n    function claimOnBehalfOfAnotherUser(address account, uint256 streamId)\\n        external\\n        pausable(1)\\n        onlyRole(CLAIM_ROLE)\\n    {\\n        _before();\\n        _moveRewardsToPending(account, streamId);\\n    }\\n\\n    /// @dev Claim all stream rewards on behalf of another user.\\n    /// @param account the user account address.\\n    function claimAllOnBehalfOfAnotherUser(address account)\\n        external\\n        pausable(1)\\n        onlyRole(CLAIM_ROLE)\\n    {\\n        _before();\\n        _moveAllRewardsToPending(account);\\n    }\\n\\n    /// @dev Claim all stream rewards on behalf of other users.\\n    /// @param accounts the user account addresses.\\n    function claimAllOnBehalfOfOtherUsers(address[] calldata accounts)\\n        external\\n        pausable(1)\\n        onlyRole(CLAIM_ROLE)\\n    {\\n        _before();\\n        uint256 accountsLength = accounts.length;\\n        for (uint256 i = 0; i < accountsLength; i++) {\\n            _moveAllRewardsToPending(accounts[i]);\\n        }\\n    }\\n\\n    /// @dev batchClaimOnBehalfOfAnotherUser when gas limits prevent users from claiming all.\\n    /// @param account the user account address.\\n    /// @param streamIds to claim.\\n    function batchClaimOnBehalfOfAnotherUser(\\n        address account,\\n        uint256[] calldata streamIds\\n    ) external pausable(1) onlyRole(CLAIM_ROLE) {\\n        _before();\\n        _batchClaimRewards(account, streamIds);\\n    }\\n\\n    /// @dev Claim all stream rewards on behalf of other users.\\n    /// @param accounts the user account addresses.\\n    function batchClaimOnBehalfOfOtherUsers(\\n        address[] calldata accounts,\\n        uint256[] calldata streamIds\\n    ) external pausable(1) onlyRole(CLAIM_ROLE) {\\n        _before();\\n        uint256 accountsLength = accounts.length;\\n        for (uint256 i = 0; i < accountsLength; i++) {\\n            _batchClaimRewards(accounts[i], streamIds);\\n        }\\n    }\\n\\n    /// @dev a user stakes amount of AURORA tokens\\n    /// The user should approve these tokens to the treasury\\n    /// contract in order to complete the stake.\\n    /// @param amount is the AURORA amount.\\n    function stake(uint256 amount) external pausable(1) {\\n        _before();\\n        _stake(msg.sender, amount);\\n        IERC20Upgradeable(auroraToken).safeTransferFrom(\\n            msg.sender,\\n            address(treasury),\\n            amount\\n        );\\n    }\\n\\n    /// @dev withdraw amount in the pending pool. User should wait for\\n    /// pending time (tau constant) in order to be able to withdraw.\\n    /// @param streamId stream index\\n    function withdraw(uint256 streamId) external pausable(1) {\\n        require(\\n            block.timestamp > users[msg.sender].releaseTime[streamId],\\n            \\\"INVALID_RELEASE_TIME\\\"\\n        );\\n        _withdraw(streamId);\\n    }\\n\\n    /// @dev withdraw all claimed balances which have passed pending periode.\\n    /// This function will reach gas limit with too many streams,\\n    /// so the frontend will allow individual stream withdrawals and disable withdrawAll.\\n    function withdrawAll() external pausable(1) {\\n        User storage userAccount = users[msg.sender];\\n        uint256 streamsLength = streams.length;\\n        for (uint256 i = 0; i < streamsLength; i++) {\\n            if (\\n                userAccount.pendings[i] != 0 &&\\n                block.timestamp > userAccount.releaseTime[i]\\n            ) {\\n                _withdraw(i);\\n            }\\n        }\\n    }\\n\\n    /// @dev withdraw a set of stream Ids.\\n    /// Allows user to select stream ids to withdraw from UI.\\n    /// @param streamIds to withdraw.\\n    function batchWithdraw(uint256[] calldata streamIds) external pausable(1) {\\n        User storage userAccount = users[msg.sender];\\n        for (uint256 i = 0; i < streamIds.length; i++) {\\n            if (\\n                userAccount.pendings[streamIds[i]] != 0 &&\\n                block.timestamp > userAccount.releaseTime[streamIds[i]]\\n            ) {\\n                _withdraw(streamIds[i]);\\n            }\\n        }\\n    }\\n\\n    /// @dev gets the total user deposit\\n    /// @param account the user address\\n    /// @return user total deposit in (AURORA)\\n    function getUserTotalDeposit(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return users[account].deposit;\\n    }\\n\\n    /// @dev gets the user shares\\n    /// @param account the user address\\n    /// @return user shares\\n    function getUserShares(address account) external view returns (uint256) {\\n        return users[account].auroraShares;\\n    }\\n\\n    /// @dev unstake amount from user shares value. The rest is re-staked\\n    /// @param amount to unstake\\n    function unstake(uint256 amount)\\n        external\\n        pausable(1)\\n        onlyValidSharesAmount\\n    {\\n        _before();\\n        uint256 stakeValue = (totalAmountOfStakedAurora *\\n            users[msg.sender].auroraShares) / totalAuroraShares;\\n        _unstake(amount, stakeValue);\\n    }\\n\\n    /// @dev unstake all the user's shares\\n    function unstakeAll() external pausable(1) onlyValidSharesAmount {\\n        _before();\\n        uint256 stakeValue = (totalAmountOfStakedAurora *\\n            users[msg.sender].auroraShares) / totalAuroraShares;\\n        _unstake(stakeValue, stakeValue);\\n    }\\n\\n    /// @dev gets a user stream shares\\n    /// @param streamId stream index\\n    /// @param account the user address\\n    /// @return user stream shares\\n    function getAmountOfShares(uint256 streamId, address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        if (streamId == 0) return users[account].auroraShares;\\n        return users[account].streamShares;\\n    }\\n\\n    /// @dev gets reward per share (RPS) for a stream\\n    /// @param streamId stream index\\n    /// @return streams[streamId].rps\\n    function getRewardPerShare(uint256 streamId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return streams[streamId].rps;\\n    }\\n\\n    /// @dev calculates and gets the latest released rewards.\\n    /// @param streamId stream index\\n    /// @return rewards released since last update.\\n    function getRewardsAmount(uint256 streamId, uint256 lastUpdate)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(lastUpdate <= block.timestamp, \\\"INVALID_LAST_UPDATE\\\");\\n        if (lastUpdate == block.timestamp) return 0; // No more rewards since last update\\n        uint256 streamStart = streams[streamId].schedule.time[0];\\n        if (block.timestamp <= streamStart) return 0; // Stream didn't start\\n        uint256 streamEnd = streams[streamId].schedule.time[\\n            streams[streamId].schedule.time.length - 1\\n        ];\\n        if (lastUpdate >= streamEnd) return 0; // Stream schedule ended, all rewards released\\n        uint256 start;\\n        uint256 end;\\n        if (lastUpdate > streamStart) {\\n            start = lastUpdate;\\n        } else {\\n            // Release rewards from stream start.\\n            start = streamStart;\\n        }\\n        if (block.timestamp < streamEnd) {\\n            end = block.timestamp;\\n        } else {\\n            // The stream already finished between the last update and now.\\n            end = streamEnd;\\n        }\\n        return rewardsSchedule(streamId, start, end);\\n    }\\n\\n    /// @dev calculates and gets the latest reward per share (RPS) for a stream\\n    /// @param streamId stream index\\n    /// @return streams[streamId].rps + scheduled reward up till now\\n    function getLatestRewardPerShare(uint256 streamId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        require(streamId != 0, \\\"AURORA_REWARDS_COMPOUND\\\");\\n        require(totalStreamShares != 0, \\\"ZERO_STREAM_SHARES\\\");\\n        return\\n            streams[streamId].rps +\\n            (getRewardsAmount(streamId, touchedAt) * RPS_MULTIPLIER) /\\n            totalStreamShares;\\n    }\\n\\n    /// @dev gets the user's reward per share (RPS) for a stream\\n    /// @param streamId stream index\\n    /// @return user.rpsDuringLastClaim[streamId]\\n    function getRewardPerShareForUser(uint256 streamId, address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return users[account].rpsDuringLastClaim[streamId];\\n    }\\n\\n    /// @dev gets the user's stream claimable amount\\n    /// @param streamId stream index\\n    /// @return (latesRPS - user.rpsDuringLastClaim) * user.shares\\n    function getStreamClaimableAmount(uint256 streamId, address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 latestRps = getLatestRewardPerShare(streamId);\\n        User storage userAccount = users[account];\\n        uint256 userRps = userAccount.rpsDuringLastClaim[streamId];\\n        uint256 userShares = userAccount.streamShares;\\n        return ((latestRps - userRps) * userShares) / RPS_MULTIPLIER;\\n    }\\n\\n    /// @dev gets the user's stream pending reward\\n    /// @param streamId stream index\\n    /// @param account user account\\n    /// @return user.pendings[streamId]\\n    function getPending(uint256 streamId, address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return users[account].pendings[streamId];\\n    }\\n\\n    /// @dev gets the user's stream reward release time\\n    /// @param streamId stream index\\n    /// @param account user account\\n    /// @return user.releaseTime[streamId]\\n    function getReleaseTime(uint256 streamId, address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return users[account].releaseTime[streamId];\\n    }\\n\\n    /// @dev gets the total amount of staked aurora\\n    /// @return totalAmountOfStakedAurora + latest reward schedule\\n    function getTotalAmountOfStakedAurora() external view returns (uint256) {\\n        if (touchedAt == 0) return 0;\\n        return totalAmountOfStakedAurora + getRewardsAmount(0, touchedAt);\\n    }\\n\\n    /// @dev gets start index and end index in a stream schedule\\n    /// @param streamId stream index\\n    /// @param start start time (in seconds)\\n    /// @param end end time (in seconds)\\n    function startEndScheduleIndex(\\n        uint256 streamId,\\n        uint256 start,\\n        uint256 end\\n    ) public view returns (uint256 startIndex, uint256 endIndex) {\\n        Schedule storage schedule = streams[streamId].schedule;\\n        uint256 scheduleTimeLength = schedule.time.length;\\n        require(scheduleTimeLength > 0, \\\"NO_SCHEDULE\\\");\\n        require(end > start, \\\"INVALID_REWARD_QUERY_PERIOD\\\");\\n        require(start >= schedule.time[0], \\\"QUERY_BEFORE_SCHEDULE_START\\\");\\n        require(\\n            end <= schedule.time[scheduleTimeLength - 1],\\n            \\\"QUERY_AFTER_SCHEDULE_END\\\"\\n        );\\n        // find start index\\n        for (uint256 i = 1; i < scheduleTimeLength; i++) {\\n            if (start < schedule.time[i]) {\\n                startIndex = i - 1;\\n                break;\\n            }\\n        }\\n        // find end index\\n        if (end == schedule.time[scheduleTimeLength - 1]) {\\n            endIndex = scheduleTimeLength - 2;\\n        } else {\\n            for (uint256 i = startIndex + 1; i < scheduleTimeLength; i++) {\\n                if (end < schedule.time[i]) {\\n                    // Users most often claim rewards within the same index which can last several months.\\n                    endIndex = i - 1;\\n                    break;\\n                }\\n            }\\n        }\\n        require(startIndex <= endIndex, \\\"INVALID_INDEX_CALCULATION\\\");\\n    }\\n\\n    /// @dev calculate the total amount of the released tokens within a period (start & end)\\n    /// @param streamId the stream index\\n    /// @param start is the start timestamp within the schedule\\n    /// @param end is the end timestamp (e.g block.timestamp .. now)\\n    /// @return amount of the released tokens for that period\\n    function rewardsSchedule(\\n        uint256 streamId,\\n        uint256 start,\\n        uint256 end\\n    ) public view returns (uint256) {\\n        Schedule storage schedule = streams[streamId].schedule;\\n        uint256 startIndex;\\n        uint256 endIndex;\\n        (startIndex, endIndex) = startEndScheduleIndex(streamId, start, end);\\n        uint256 rewardScheduledAmount = 0;\\n        uint256 reward = 0;\\n        if (startIndex == endIndex) {\\n            // start and end are within the same schedule period\\n            reward =\\n                schedule.reward[startIndex] -\\n                schedule.reward[startIndex + 1];\\n            rewardScheduledAmount =\\n                (reward * (end - start)) /\\n                (schedule.time[startIndex + 1] - schedule.time[startIndex]);\\n        } else {\\n            // start and end are not within the same schedule period\\n            // Reward during the startIndex period\\n            reward =\\n                schedule.reward[startIndex] -\\n                schedule.reward[startIndex + 1];\\n            rewardScheduledAmount =\\n                (reward * (schedule.time[startIndex + 1] - start)) /\\n                (schedule.time[startIndex + 1] - schedule.time[startIndex]);\\n            // Reward during the period from startIndex + 1  to endIndex - 1\\n            rewardScheduledAmount +=\\n                schedule.reward[startIndex + 1] -\\n                schedule.reward[endIndex];\\n            // Reward during the endIndex period\\n            reward = schedule.reward[endIndex] - schedule.reward[endIndex + 1];\\n            rewardScheduledAmount +=\\n                (reward * (end - schedule.time[endIndex])) /\\n                (schedule.time[endIndex + 1] - schedule.time[endIndex]);\\n        }\\n        return rewardScheduledAmount;\\n    }\\n\\n    /// @dev called before touching the contract reserves (stake/unstake)\\n    function _before() internal {\\n        if (touchedAt == block.timestamp) return; // Already updated by previous tx in same block.\\n        if (totalAuroraShares != 0) {\\n            // Don't release rewards if there are no stakers.\\n            totalAmountOfStakedAurora += getRewardsAmount(0, touchedAt);\\n            uint256 streamsLength = streams.length;\\n            for (uint256 i = 1; i < streamsLength; i++) {\\n                if (streams[i].status == StreamStatus.ACTIVE) {\\n                    // If stream becomes blacklisted, no more rewards are released.\\n                    streams[i].rps = getLatestRewardPerShare(i);\\n                }\\n            }\\n        }\\n        touchedAt = block.timestamp;\\n    }\\n\\n    /// @dev calculate the weighted stream shares at given timeshamp.\\n    /// @param timestamp the timestamp refering to the current or older timestamp\\n    function _weightedShares(uint256 shares, uint256 timestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 slopeStart = streams[0].schedule.time[0] + ONE_MONTH;\\n        uint256 slopeEnd = slopeStart + FOUR_YEARS;\\n        if (timestamp <= slopeStart) return shares * maxWeight;\\n        if (timestamp >= slopeEnd) return shares * minWeight;\\n        return\\n            shares *\\n            minWeight +\\n            (shares * (maxWeight - minWeight) * (slopeEnd - timestamp)) /\\n            (slopeEnd - slopeStart);\\n    }\\n\\n    /// @dev allocate the collected reward to the pending tokens\\n    /// Rewards will become withdrawable after the release time.\\n    /// @param account is the staker address\\n    /// @param streamId the stream index\\n    function _moveRewardsToPending(address account, uint256 streamId) internal {\\n        require(streamId != 0, \\\"AURORA_REWARDS_COMPOUND\\\");\\n        require(\\n            streams[streamId].status == StreamStatus.ACTIVE,\\n            \\\"INACTIVE_OR_PROPOSED_STREAM\\\"\\n        );\\n        User storage userAccount = users[account];\\n        require(\\n            userAccount.auroraShares != 0,\\n            \\\"USER_DOES_NOT_HAVE_ACTUAL_STAKE\\\"\\n        );\\n        uint256 reward = ((streams[streamId].rps -\\n            userAccount.rpsDuringLastClaim[streamId]) *\\n            userAccount.streamShares) / RPS_MULTIPLIER;\\n        if (reward == 0) return; // All rewards claimed or stream schedule didn't start\\n        userAccount.pendings[streamId] += reward;\\n        userAccount.rpsDuringLastClaim[streamId] = streams[streamId].rps;\\n        userAccount.releaseTime[streamId] =\\n            block.timestamp +\\n            streams[streamId].tau;\\n        // If the stream is blacklisted, remaining unclaimed rewards will be transfered out.\\n        streams[streamId].rewardClaimedAmount += reward;\\n        emit Pending(streamId, account, userAccount.pendings[streamId]);\\n    }\\n\\n    /// @dev move all the streams rewards for a user to the pending tokens\\n    /// @param account is the staker address\\n    function _moveAllRewardsToPending(address account) internal {\\n        uint256 streamsLength = streams.length;\\n        for (uint256 i = 1; i < streamsLength; i++) {\\n            if (streams[i].status == StreamStatus.ACTIVE)\\n                _moveRewardsToPending(account, i);\\n        }\\n    }\\n\\n    /// @dev moves a set of stream Id rewards to pending.\\n    /// `_before` must be called before to update the streams rps.\\n    /// @param account the user account address.\\n    /// @param streamIds to claim.\\n    function _batchClaimRewards(address account, uint256[] calldata streamIds)\\n        internal\\n    {\\n        for (uint256 i = 0; i < streamIds.length; i++) {\\n            if (streams[streamIds[i]].status == StreamStatus.ACTIVE)\\n                _moveRewardsToPending(account, streamIds[i]);\\n        }\\n    }\\n\\n    /// @dev calculate the shares for a user per AURORA stream and other streams\\n    /// @param amount the staked amount\\n    /// WARNING: rewards are not claimed during stake.\\n    /// The UI must make sure to claim rewards before adding more stake.\\n    /// Unclaimed rewards will be lost.\\n    /// `_before()` must be called before `_stake` to update streams rps\\n    /// compounded AURORA rewards.\\n    function _stake(address account, uint256 amount) internal {\\n        // recalculation of shares for user\\n        User storage userAccount = users[account];\\n        uint256 _amountOfShares = 0;\\n        if (totalAuroraShares == 0) {\\n            // initialize the number of shares (_amountOfShares) owning 100% of the stake (amount)\\n            _amountOfShares = amount;\\n        } else {\\n            uint256 numerator = amount * totalAuroraShares;\\n            _amountOfShares = numerator / totalAmountOfStakedAurora;\\n            // check that rounding is needed (result * denominator < numerator).\\n            if (_amountOfShares * totalAmountOfStakedAurora < numerator) {\\n                // Round up so users don't get less sharesValue than their staked amount\\n                _amountOfShares += 1;\\n            }\\n        }\\n        userAccount.auroraShares += _amountOfShares;\\n        totalAuroraShares += _amountOfShares;\\n        totalAmountOfStakedAurora += amount;\\n        userAccount.deposit += amount;\\n\\n        // Calculate stream shares\\n        uint256 weightedAmountOfSharesPerStream = _weightedShares(\\n            _amountOfShares,\\n            block.timestamp\\n        );\\n        totalStreamShares += weightedAmountOfSharesPerStream;\\n        userAccount.streamShares += weightedAmountOfSharesPerStream;\\n        uint256 streamsLength = streams.length;\\n        for (uint256 i = 1; i < streamsLength; i++) {\\n            userAccount.rpsDuringLastClaim[i] = streams[i].rps; // The new shares should not claim old rewards\\n        }\\n        emit Staked(account, amount, _amountOfShares);\\n    }\\n\\n    /// WARNING: rewards are not claimed during unstake.\\n    /// The UI must make sure to claim rewards before unstaking.\\n    /// Unclaimed rewards will be lost.\\n    /// `_before()` must be called before `_unstake` to update streams rps\\n    function _unstake(uint256 amount, uint256 stakeValue) internal {\\n        require(amount != 0, \\\"ZERO_AMOUNT\\\");\\n        require(amount <= stakeValue, \\\"NOT_ENOUGH_STAKE_BALANCE\\\");\\n        User storage userAccount = users[msg.sender];\\n        // move rewards to pending\\n        // remove the shares from everywhere\\n        totalAuroraShares -= userAccount.auroraShares;\\n        totalStreamShares -= userAccount.streamShares;\\n        userAccount.auroraShares = 0;\\n        userAccount.streamShares = 0;\\n        // update the total Aurora staked and deposits\\n        totalAmountOfStakedAurora -= stakeValue;\\n        userAccount.deposit = 0;\\n        // move unstaked AURORA to pending.\\n        userAccount.pendings[0] += amount;\\n        userAccount.releaseTime[0] = block.timestamp + streams[0].tau;\\n        emit Pending(0, msg.sender, userAccount.pendings[0]);\\n        emit Unstaked(msg.sender, amount);\\n        // restake the rest\\n        uint256 amountToRestake = stakeValue - amount;\\n        if (amountToRestake > 0) {\\n            _stake(msg.sender, amountToRestake);\\n        }\\n    }\\n\\n    /// @dev validates the stream parameters prior proposing it.\\n    /// @param streamOwner stream owner address\\n    /// @param rewardToken stream reward token address\\n    /// @param maxDepositAmount the max reward token deposit\\n    /// @param minDepositAmount the min reward token deposit\\n    /// @param scheduleTimes the stream schedule time list\\n    /// @param scheduleRewards the stream schedule reward list\\n    /// @param tau the tau is (pending release period) for this stream (e.g one day)\\n    function _validateStreamParameters(\\n        address streamOwner,\\n        address rewardToken,\\n        uint256 maxDepositAmount,\\n        uint256 minDepositAmount,\\n        uint256[] memory scheduleTimes,\\n        uint256[] memory scheduleRewards,\\n        uint256 tau\\n    ) internal view {\\n        require(streamOwner != address(0), \\\"INVALID_STREAM_OWNER_ADDRESS\\\");\\n        require(rewardToken != address(0), \\\"INVALID_REWARD_TOKEN_ADDRESS\\\");\\n        require(maxDepositAmount > 0, \\\"ZERO_MAX_DEPOSIT\\\");\\n        require(minDepositAmount > 0, \\\"ZERO_MIN_DEPOSIT\\\");\\n        require(minDepositAmount <= maxDepositAmount, \\\"INVALID_MIN_DEPOSIT\\\");\\n        require(\\n            maxDepositAmount == scheduleRewards[0],\\n            \\\"MAX_DEPOSIT_MUST_EQUAL_SCHEDULE\\\"\\n        );\\n        // scheduleTimes[0] == proposal expiration time\\n        require(\\n            scheduleTimes[0] > block.timestamp,\\n            \\\"INVALID_STREAM_EXPIRATION_DATE\\\"\\n        );\\n        require(\\n            scheduleTimes.length == scheduleRewards.length,\\n            \\\"INVALID_SCHEDULE_VALUES\\\"\\n        );\\n        require(scheduleTimes.length >= 2, \\\"SCHEDULE_TOO_SHORT\\\");\\n        require(tau != 0, \\\"INVALID_TAU_PERIOD\\\");\\n        for (uint256 i = 1; i < scheduleTimes.length; i++) {\\n            require(\\n                scheduleTimes[i] > scheduleTimes[i - 1],\\n                \\\"INVALID_SCHEDULE_TIMES\\\"\\n            );\\n            require(\\n                scheduleRewards[i] <= scheduleRewards[i - 1],\\n                \\\"INVALID_SCHEDULE_REWARDS\\\"\\n            );\\n        }\\n        require(\\n            scheduleRewards[scheduleRewards.length - 1] == 0,\\n            \\\"INVALID_SCHEDULE_END_REWARD\\\"\\n        );\\n    }\\n\\n    /// @dev updates the stream reward schedule if the reward token amount is less than\\n    /// the max deposit amount.\\n    /// @param streamId the stream index\\n    /// @param rewardTokenAmount the stream reward token amount\\n    function _updateStreamRewardSchedules(\\n        uint256 streamId,\\n        uint256 rewardTokenAmount\\n    ) internal {\\n        uint256 streamScheduleRewardLength = streams[streamId]\\n            .schedule\\n            .reward\\n            .length;\\n        for (uint256 i = 0; i < streamScheduleRewardLength; i++) {\\n            streams[streamId].schedule.reward[i] =\\n                (streams[streamId].schedule.reward[i] * rewardTokenAmount) /\\n                streams[streamId].maxDepositAmount;\\n        }\\n    }\\n\\n    /// @dev withdraw stream rewards after the release time.\\n    /// @param streamId the stream index\\n    function _withdraw(uint256 streamId) internal {\\n        User storage userAccount = users[msg.sender];\\n        uint256 pendingAmount = userAccount.pendings[streamId];\\n        userAccount.pendings[streamId] = 0;\\n        emit Released(streamId, msg.sender, pendingAmount);\\n        ITreasury(treasury).payRewards(\\n            msg.sender,\\n            streams[streamId].rewardToken,\\n            pendingAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x6629f299c2043246facd5ef10d07fbb4fbc20c9b41d45c88589e0dbbee9747bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50600054610100900460ff16620000335760005460ff16156200003d565b6200003d620000e2565b620000a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c8576000805461ffff19166101011790555b8015620000db576000805461ff00191690555b5062000106565b6000620000fa306200010060201b620038ef1760201c565b15905090565b3b151590565b608051615f756200013760003960008181611a2801528181611a68015281816122ec015261232c0152615f756000f3fe6080604052600436106103155760003560e01c806301ffc9a71461031a578063036877881461034f5780630c2ee55e1461037d5780630efd8310146103945780631194ebeb146103b457806312dd67fe146103d65780631c61e617146103f65780631dd00452146104165780631e0fbfa21461045b5780631fd8c5f41461047d57806320988cef14610493578063248a9ca3146104aa5780632692c59f146104ca57806326cdddb9146104ea578063275719691461050a5780632ca783f31461052a5780632e17de781461054a5780632e1a7d4d1461056a5780632f2ff15d1461058a57806335322f37146105aa57806336568abe146105bf5780633659cfe6146105df57806336630cc7146105ff5780633895a2751461061f578063389ed26714610635578063396a6c14146106575780633ba31abf146106775780633e9a44cb146106975780633ea005c8146106b75780634981912e146106d95780634f1ef2861461070757806353a4cca01461071a5780635578fdb21461073a57806357baeac8146107685780635c975abb1461078857806361d027b31461079e5780636458edd3146107bf578063687dd46c146107df5780636c4624c3146107ff5780636db8e53d1461081f57806370bc770c1461083557806372e55399146108635780637f37df3b146108835780637f51bb1f146108c8578063853828b6146108e857806386c1b4eb146108fd578063894e9a0d1461091f5780638bc34e77146109565780638d40bd031461096b578063904033221461098b57806391d14854146109ab578063993b21c1146109cb5780639c52a920146109eb578063a217fddf14610a0b578063a4c828dc14610a20578063a694fc3a14610a57578063a81c6a1514610a77578063a87430ba14610a97578063a8b0bb8314610aef578063b8e9744c14610b06578063ba0cb22b14610b26578063bb07ec1b14610b60578063be831a2e14610b76578063c892772314610b96578063cd5ba59014610bdb578063d5050aed14610bf0578063d547741f14610c10578063e335e79a14610c30578063ee13ad8e14610c46578063fe904b7a14610c66575b600080fd5b34801561032657600080fd5b5061033a6103353660046152ad565b610c7e565b60405190151581526020015b60405180910390f35b34801561035b57600080fd5b5061036f61036a3660046152d7565b610cb5565b604051908152602001610346565b34801561038957600080fd5b5061036f6101035481565b3480156103a057600080fd5b5061036f6103af36600461531f565b611024565b3480156103c057600080fd5b506103d46103cf366004615405565b611070565b005b3480156103e257600080fd5b5061036f6103f13660046154b0565b61138a565b34801561040257600080fd5b5061036f61041136600461531f565b61144d565b34801561042257600080fd5b5061036f61043136600461531f565b6001600160a01b031660009081526101046020908152604080832093835260059093019052205490565b34801561046757600080fd5b5061036f600080516020615f0083398151915281565b34801561048957600080fd5b5061036f60fd5481565b34801561049f57600080fd5b5061036f6228207281565b3480156104b657600080fd5b5061036f6104c53660046154b0565b6114c4565b3480156104d657600080fd5b506103d46104e53660046154b0565b6114d9565b3480156104f657600080fd5b506103d4610505366004615514565b61155c565b34801561051657600080fd5b506103d461052536600461557f565b61160d565b34801561053657600080fd5b506103d46105453660046155c0565b6116ba565b34801561055657600080fd5b506103d46105653660046154b0565b611743565b34801561057657600080fd5b506103d46105853660046154b0565b611813565b34801561059657600080fd5b506103d46105a536600461531f565b6118bb565b3480156105b657600080fd5b506103d46118d8565b3480156105cb57600080fd5b506103d46105da36600461531f565b6119a3565b3480156105eb57600080fd5b506103d46105fa3660046155ea565b611a1d565b34801561060b57600080fd5b5061036f61061a366004615605565b611ae6565b34801561062b57600080fd5b5061036f60fc5481565b34801561064157600080fd5b5061036f600080516020615ea083398151915281565b34801561066357600080fd5b5061036f6106723660046154b0565b611c59565b34801561068357600080fd5b506103d461069236600461531f565b611ce4565b3480156106a357600080fd5b506103d46106b23660046155c0565b611f95565b3480156106c357600080fd5b5061036f600080516020615df983398151915281565b3480156106e557600080fd5b506106f96106f43660046152d7565b611ff7565b604051610346929190615627565b6103d4610715366004615635565b6122e1565b34801561072657600080fd5b506103d46107353660046156da565b612397565b34801561074657600080fd5b506101015461075b906001600160a01b031681565b604051610346919061574d565b34801561077457600080fd5b5061036f6107833660046155ea565b612535565b34801561079457600080fd5b5061036f60fb5481565b3480156107aa57600080fd5b506101005461075b906001600160a01b031681565b3480156107cb57600080fd5b506103d46107da366004615761565b6125aa565b3480156107eb57600080fd5b506103d46107fa36600461557f565b612614565b34801561080b57600080fd5b506103d461081a3660046152d7565b61265e565b34801561082b57600080fd5b5061036f60ff5481565b34801561084157600080fd5b506108556108503660046154b0565b612676565b6040516103469291906157ee565b34801561086f57600080fd5b506103d461087e36600461557f565b612776565b34801561088f57600080fd5b5061036f61089e36600461531f565b6001600160a01b031660009081526101046020908152604080832093835260039093019052205490565b3480156108d457600080fd5b506103d46108e33660046155ea565b612869565b3480156108f457600080fd5b506103d461294c565b34801561090957600080fd5b5061036f600080516020615ee083398151915281565b34801561092b57600080fd5b5061093f61093a3660046154b0565b6129f0565b6040516103469b9a99989796959493929190615829565b34801561096257600080fd5b506103d4612ab6565b34801561097757600080fd5b506103d4610986366004615605565b612afe565b34801561099757600080fd5b506103d46109a63660046154b0565b612e3a565b3480156109b757600080fd5b5061033a6109c636600461531f565b612f2d565b3480156109d757600080fd5b5061036f6109e63660046154b0565b612f58565b3480156109f757600080fd5b506103d4610a063660046154b0565b612f87565b348015610a1757600080fd5b5061036f600081565b348015610a2c57600080fd5b5061036f610a3b3660046155ea565b6001600160a01b03166000908152610104602052604090205490565b348015610a6357600080fd5b506103d4610a723660046154b0565b6131a5565b348015610a8357600080fd5b506103d4610a923660046158b1565b61320f565b348015610aa357600080fd5b50610ad4610ab23660046155ea565b6101046020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610346565b348015610afb57600080fd5b5061036f6101025481565b610b19610b14366004615635565b61371f565b60405161034691906159c5565b348015610b3257600080fd5b5061036f610b413660046155ea565b6001600160a01b03166000908152610104602052604090206001015490565b348015610b6c57600080fd5b5061036f60fe5481565b348015610b8257600080fd5b506103d4610b91366004615605565b6137e5565b348015610ba257600080fd5b5061036f610bb136600461531f565b6001600160a01b031660009081526101046020908152604080832093835260049093019052205490565b348015610be757600080fd5b5061036f6137f6565b348015610bfc57600080fd5b506103d4610c0b3660046155ea565b613828565b348015610c1c57600080fd5b506103d4610c2b36600461531f565b613889565b348015610c3c57600080fd5b506101055461036f565b348015610c5257600080fd5b506103d4610c613660046154b0565b6138a6565b348015610c7257600080fd5b5061036f630786156081565b60006001600160e01b03198216637965db0b60e01b1480610caf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806101058581548110610ccc57610ccc6159d8565b90600052602060002090600f0201600c019050600080610ced878787611ff7565b909250905060008083831415610dcc5784600101846001610d0e9190615a04565b81548110610d1e57610d1e6159d8565b9060005260206000200154856001018581548110610d3e57610d3e6159d8565b9060005260206000200154610d539190615a1c565b9050846000018481548110610d6a57610d6a6159d8565b60009182526020909120015485610d82866001615a04565b81548110610d9257610d926159d8565b9060005260206000200154610da79190615a1c565b610db18989615a1c565b610dbb9083615a33565b610dc59190615a52565b9150611016565b84600101846001610ddd9190615a04565b81548110610ded57610ded6159d8565b9060005260206000200154856001018581548110610e0d57610e0d6159d8565b9060005260206000200154610e229190615a1c565b9050846000018481548110610e3957610e396159d8565b60009182526020909120015485610e51866001615a04565b81548110610e6157610e616159d8565b9060005260206000200154610e769190615a1c565b8886610e83876001615a04565b81548110610e9357610e936159d8565b9060005260206000200154610ea89190615a1c565b610eb29083615a33565b610ebc9190615a52565b9150846001018381548110610ed357610ed36159d8565b906000526020600020015485600101856001610eef9190615a04565b81548110610eff57610eff6159d8565b9060005260206000200154610f149190615a1c565b610f1e9083615a04565b915084600101836001610f319190615a04565b81548110610f4157610f416159d8565b9060005260206000200154856001018481548110610f6157610f616159d8565b9060005260206000200154610f769190615a1c565b9050846000018381548110610f8d57610f8d6159d8565b60009182526020909120015485610fa5856001615a04565b81548110610fb557610fb56159d8565b9060005260206000200154610fca9190615a1c565b856000018481548110610fdf57610fdf6159d8565b906000526020600020015488610ff59190615a1c565b610fff9083615a33565b6110099190615a52565b6110139083615a04565b91505b5093505050505b9392505050565b60008261104e57506001600160a01b03811660009081526101046020526040902060010154610caf565b506001600160a01b031660009081526101046020526040902060020154919050565b600080516020615df983398151915261108981336138f5565b61109889898888888888613959565b61010054604051630480051d60e31b81526001600160a01b039091169063240028e8906110c9908b9060040161574d565b602060405180830381865afa1580156110e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110a9190615a74565b61112f5760405162461bcd60e51b815260040161112690615a96565b60405180910390fd5b600060405180604001604052808681526020018581525090506000610105805490509050610105604051806101c001604052808d6001600160a01b03168152602001336001600160a01b031681526020018c6001600160a01b031681526020018b81526020016000815260200160008152602001600081526020018a8152602001898152602001886000815181106111c9576111c96159d8565b6020026020010151815260200186815260200160008152602001848152602001600160028111156111fc576111fc615813565b905281546001808201845560009384526020938490208351600f9093020180546001600160a01b03199081166001600160a01b0394851617825584860151928201805482169385169390931790925560408401516002820180549093169316929092179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b82015561018082015180518051939492939192600c8501926112e1928492019061524d565b5060208281015180516112fa926001850192019061524d565b5050506101a0820151600e8201805460ff1916600183600281111561132157611321615813565b02179055505050896001600160a01b03168b6001600160a01b031682600080516020615e598339815191528b8d60405161135c929190615627565b60405180910390a46101015461137d906001600160a01b031633308c613e1c565b5050505050505050505050565b6000816113a95760405162461bcd60e51b815260040161112690615acd565b60ff546113ed5760405162461bcd60e51b81526020600482015260126024820152715a45524f5f53545245414d5f53484152455360701b6044820152606401611126565b60ff5468fc6f7c40458122964d601f1b6114098460fd54611ae6565b6114139190615a33565b61141d9190615a52565b6101058381548110611431576114316159d8565b90600052602060002090600f0201600b0154610caf9190615a04565b6000806114598461138a565b6001600160a01b03841660009081526101046020908152604080832088845260058101909252909120546002820154929350909168fc6f7c40458122964d601f1b816114a58487615a1c565b6114af9190615a33565b6114b99190615a52565b979650505050505050565b600090815260c9602052604090206001015490565b600080516020615ea08339815191526114f281336138f5565b60fb54828116148061150a575061150a600033612f2d565b6115565760405162461bcd60e51b815260206004820152601e60248201527f4f4e4c595f44454641554c545f41444d494e5f43414e5f554e504155534500006044820152606401611126565b5060fb55565b60018060fb5416600014806115775750611577600033612f2d565b6115935760405162461bcd60e51b815260040161112690615afe565b600080516020615ee08339815191526115ac81336138f5565b6115b4613e74565b8460005b81811015611603576115f18888838181106115d5576115d56159d8565b90506020020160208101906115ea91906155ea565b8787613f4c565b806115fb81615b2a565b9150506115b8565b5050505050505050565b60018060fb5416600014806116285750611628600033612f2d565b6116445760405162461bcd60e51b815260040161112690615afe565b600080516020615ee083398151915261165d81336138f5565b611665613e74565b8260005b818110156116b2576116a0868683818110611686576116866159d8565b905060200201602081019061169b91906155ea565b613fe7565b806116aa81615b2a565b915050611669565b505050505050565b60018060fb5416600014806116d557506116d5600033612f2d565b6116f15760405162461bcd60e51b815260040161112690615afe565b600080516020615f0083398151915261170a81336138f5565b611712613e74565b61171c8484614056565b610100546101015461173d916001600160a01b039182169133911686613e1c565b50505050565b60018060fb54166000148061175e575061175e600033612f2d565b61177a5760405162461bcd60e51b815260040161112690615afe565b60fe546117995760405162461bcd60e51b815260040161112690615b45565b33600090815261010460205260409020600101546117c95760405162461bcd60e51b815260040161112690615b77565b6117d1613e74565b60fe54336000908152610104602052604081206001015460fc549192916117f89190615a33565b6118029190615a52565b905061180e8382614214565b505050565b60018060fb54166000148061182e575061182e600033612f2d565b61184a5760405162461bcd60e51b815260040161112690615afe565b3360009081526101046020908152604080832085845260040190915290205442116118ae5760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f52454c454153455f54494d4560601b6044820152606401611126565b6118b7826143fa565b5050565b6118c4826114c4565b6118ce81336138f5565b61180e83836144ef565b60018060fb5416600014806118f357506118f3600033612f2d565b61190f5760405162461bcd60e51b815260040161112690615afe565b60fe5461192e5760405162461bcd60e51b815260040161112690615b45565b336000908152610104602052604090206001015461195e5760405162461bcd60e51b815260040161112690615b77565b611966613e74565b60fe54336000908152610104602052604081206001015460fc5491929161198d9190615a33565b6119979190615a52565b90506118b78182614214565b6001600160a01b0381163314611a135760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401611126565b6118b78282614575565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611a665760405162461bcd60e51b815260040161112690615ba1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a986145dc565b6001600160a01b031614611abe5760405162461bcd60e51b815260040161112690615bdb565b611ac7816145f8565b60408051600080825260208201909252611ae391839190614604565b50565b600042821115611b2e5760405162461bcd60e51b8152602060048201526013602482015272494e56414c49445f4c4153545f55504441544560681b6044820152606401611126565b42821415611b3e57506000610caf565b60006101058481548110611b5457611b546159d8565b90600052602060002090600f0201600c01600001600081548110611b7a57611b7a6159d8565b90600052602060002001549050804211611b98576000915050610caf565b60006101058581548110611bae57611bae6159d8565b90600052602060002090600f0201600c0160000160016101058781548110611bd857611bd86159d8565b60009182526020909120600c600f909202010154611bf69190615a1c565b81548110611c0657611c066159d8565b90600052602060002001549050808410611c2557600092505050610caf565b60008083861115611c3857859150611c3c565b8391505b82421015611c4b575042611c4e565b50815b6114b9878383610cb5565b6000806101058381548110611c7057611c706159d8565b60009182526020909120600f9091020190506002600e82015460ff166002811115611c9d57611c9d615813565b14611cab5750600092915050565b6000611cbb848360090154611ae6565b90508160050154826003015482611cd29190615a33565b611cdc9190615a52565b949350505050565b600080516020615df9833981519152611cfd81336138f5565b82611d485760405162461bcd60e51b815260206004820152601b60248201527a4155524f52415f53545245414d5f4e4f545f52454d4f5641424c4560281b6044820152606401611126565b60006101058481548110611d5e57611d5e6159d8565b60009182526020909120600f9091020190506002600e82015460ff166002811115611d8b57611d8b615813565b14611dd15760405162461bcd60e51b815260206004820152601660248201527514d51491505357d053149150511657d4915353d5915160521b6044820152606401611126565b600e8101805460ff19169055600281015481546040516001600160a01b03928316929091169086907f661da9ced4b5d786f5b5f451a5f68af24721a01b0a65bb47fa4fdf70b80b887c90600090a4600081600401548260030154611e359190615a1c565b9050600082600601548360050154611e4d9190615a1c565b61010154909150600090611e69906001600160a01b0316612535565b6002850154909150600090611e86906001600160a01b0316612535565b610100546001870154610101549293506001600160a01b039182169263da0c1a8892918216911685881115611ebb5785611ebd565b875b6040518463ffffffff1660e01b8152600401611edb93929190615c15565b600060405180830381600087803b158015611ef557600080fd5b505af1158015611f09573d6000803e3d6000fd5b50506101005460028801546001600160a01b03918216935063da0c1a8892508a911684871115611f395784611f3b565b865b6040518463ffffffff1660e01b8152600401611f5993929190615c15565b600060405180830381600087803b158015611f7357600080fd5b505af1158015611f87573d6000803e3d6000fd5b505050505050505050505050565b60018060fb541660001480611fb05750611fb0600033612f2d565b611fcc5760405162461bcd60e51b815260040161112690615afe565b600080516020615ee0833981519152611fe581336138f5565b611fed613e74565b61173d8484614744565b60008060006101058681548110612010576120106159d8565b60009182526020909120600c600f90920201018054909150806120635760405162461bcd60e51b815260206004820152600b60248201526a4e4f5f5343484544554c4560a81b6044820152606401611126565b8585116120b05760405162461bcd60e51b815260206004820152601b60248201527a1253959053125117d49155d0549117d45551549657d411549253d1602a1b6044820152606401611126565b816000016000815481106120c6576120c66159d8565b906000526020600020015486101561211e5760405162461bcd60e51b815260206004820152601b60248201527a145551549657d0915193d49157d4d0d2115115531157d4d5105495602a1b6044820152606401611126565b8161212a600183615a1c565b8154811061213a5761213a6159d8565b906000526020600020015485111561218f5760405162461bcd60e51b8152602060048201526018602482015277145551549657d05195115497d4d0d2115115531157d1539160421b6044820152606401611126565b60015b818110156121e5578260000181815481106121af576121af6159d8565b90600052602060002001548710156121d3576121cc600182615a1c565b94506121e5565b806121dd81615b2a565b915050612192565b50816121f2600183615a1c565b81548110612202576122026159d8565b90600052602060002001548514156122265761221f600282615a1c565b925061228b565b6000612233856001615a04565b90505b8181101561228957826000018181548110612253576122536159d8565b906000526020600020015486101561227757612270600182615a1c565b9350612289565b8061228181615b2a565b915050612236565b505b828411156122d75760405162461bcd60e51b815260206004820152601960248201527824a72b20a624a22fa4a72222ac2fa1a0a621aaa620aa24a7a760391b6044820152606401611126565b5050935093915050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561232a5760405162461bcd60e51b815260040161112690615ba1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661235c6145dc565b6001600160a01b0316146123825760405162461bcd60e51b815260040161112690615bdb565b61238b826145f8565b6118b782826001614604565b60018060fb5416600014806123b257506123b2600033612f2d565b6123ce5760405162461bcd60e51b815260040161112690615afe565b600080516020615f008339815191526123e781336138f5565b8584811461242e5760405162461bcd60e51b81526020600482015260146024820152730929cac82989288be82a4a482b2be988a9c8ea8960631b6044820152606401611126565b612436613e74565b6000805b828110156124c257878782818110612454576124546159d8565b90506020020135826124669190615a04565b91506124b08a8a8381811061247d5761247d6159d8565b905060200201602081019061249291906155ea565b8989848181106124a4576124a46159d8565b90506020020135614056565b806124ba81615b2a565b91505061243a565b508481146125095760405162461bcd60e51b81526020600482015260146024820152731253959053125117d0905510d217d05353d5539560621b6044820152606401611126565b610100546101015461252a916001600160a01b039182169133911688613e1c565b505050505050505050565b610100546040516370a0823160e01b81526000916001600160a01b03808516926370a082319261256992169060040161574d565b602060405180830381865afa158015612586573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caf9190615c39565b60018060fb5416600014806125c557506125c5600033612f2d565b6125e15760405162461bcd60e51b815260040161112690615afe565b600080516020615ee08339815191526125fa81336138f5565b612602613e74565b61260d858585613f4c565b5050505050565b60018060fb54166000148061262f575061262f600033612f2d565b61264b5760405162461bcd60e51b815260040161112690615afe565b612653613e74565b61180e338484613f4c565b600061266a81336138f5565b50825491821816189055565b606080610105838154811061268d5761268d6159d8565b90600052602060002090600f0201600c0160000161010584815481106126b5576126b56159d8565b90600052602060002090600f0201600c016001018180548060200260200160405190810160405280929190818152602001828054801561271457602002820191906000526020600020905b815481526020019060010190808311612700575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561276657602002820191906000526020600020905b815481526020019060010190808311612752575b5050505050905091509150915091565b60018060fb5416600014806127915750612791600033612f2d565b6127ad5760405162461bcd60e51b815260040161112690615afe565b33600090815261010460205260408120905b8381101561260d578160030160008686848181106127df576127df6159d8565b905060200201358152602001908152602001600020546000141580156128315750816004016000868684818110612818576128186159d8565b9050602002013581526020019081526020016000205442115b156128575761285785858381811061284b5761284b6159d8565b905060200201356143fa565b8061286181615b2a565b9150506127bf565b600061287581336138f5565b60fb546128b45760405162461bcd60e51b815260206004820152600d60248201526c524551554952455f504155534560981b6044820152606401611126565b6001600160a01b0382166128da5760405162461bcd60e51b815260040161112690615c52565b610100546001600160a01b03838116911614156129285760405162461bcd60e51b815260206004820152600c60248201526b53414d455f4144445245535360a01b6044820152606401611126565b5061010080546001600160a01b0319166001600160a01b0392909216919091179055565b60018060fb5416600014806129675750612967600033612f2d565b6129835760405162461bcd60e51b815260040161112690615afe565b336000908152610104602052604081206101055490915b8181101561173d576000818152600384016020526040902054158015906129d05750600081815260048401602052604090205442115b156129de576129de816143fa565b806129e881615b2a565b91505061299a565b6000806000806000806000806000806000806101058d81548110612a1657612a166159d8565b90600052602060002090600f020190508060000160009054906101000a90046001600160a01b03168160020160009054906101000a90046001600160a01b031682600301548360040154846005015485600601548660070154876009015488600b015489600a01548a600e0160009054906101000a900460ff169b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b60018060fb541660001480612ad15750612ad1600033612f2d565b612aed5760405162461bcd60e51b815260040161112690615afe565b612af5613e74565b611ae333613fe7565b60018060fb541660001480612b195750612b19600033612f2d565b612b355760405162461bcd60e51b815260040161112690615afe565b60006101058481548110612b4b57612b4b6159d8565b60009182526020909120600f9091020190506001600e82015460ff166002811115612b7857612b78615813565b14612b955760405162461bcd60e51b815260040161112690615c7b565b80546001600160a01b03163314612bbe5760405162461bcd60e51b815260040161112690615ca8565b4281600c01600001600081548110612bd857612bd86159d8565b90600052602060002001541015612c2b5760405162461bcd60e51b815260206004820152601760248201527614d51491505357d41493d413d4d05317d1561412549151604a1b6044820152606401611126565b8060070154831115612c715760405162461bcd60e51b815260206004820152600f60248201526e0a48aae82a488bea89e9ebe90928e9608b1b6044820152606401611126565b8060080154831015612cb65760405162461bcd60e51b815260206004820152600e60248201526d5245574152445f544f4f5f4c4f5760901b6044820152606401611126565b600e8101805460ff19166002179055600581018390556007810154831015612d435760008160070154826003015485612cef9190615a33565b612cf99190615a52565b90506000818360030154612d0d9190615a1c565b600384018390559050612d2086866149cb565b600183015461010154612d40916001600160a01b03918216911683614ad5565b50505b6002810154815460038301546040516001600160a01b0393841693909216918791600080516020615ec083398151915291612d7f918991615627565b60405180910390a46005810154600d82018054600090612da157612da16159d8565b906000526020600020015414612df35760405162461bcd60e51b81526020600482015260176024820152761253959053125117d4d5105495125391d7d49155d05491604a1b6044820152606401611126565b61010054600382015461010154612e18926001600160a01b0391821692911690614ad5565b61010054600282015461173d916001600160a01b039182169133911686613e1c565b600080516020615df9833981519152612e5381336138f5565b60006101058381548110612e6957612e696159d8565b60009182526020909120600f9091020190506001600e82015460ff166002811115612e9657612e96615813565b14612eb35760405162461bcd60e51b815260040161112690615c7b565b600e8101805460ff191690556003810180546000918290556002830154835460405192936001600160a01b0392831693929091169187917ffadbcbd495527ce5e10fd0cceba57d404a4625dd6ce0499c254ac523789ef3ad91a460018201546101015461173d916001600160a01b03918216911683614ad5565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006101058281548110612f6e57612f6e6159d8565b90600052602060002090600f0201600b01549050919050565b60018060fb541660001480612fa25750612fa2600033612f2d565b612fbe5760405162461bcd60e51b815260040161112690615afe565b81612ffe5760405162461bcd60e51b815260206004820152601060248201526f4155524f52415f53545245414d5f4e4160801b6044820152606401611126565b60006101058381548110613014576130146159d8565b60009182526020909120600f9091020180549091506001600160a01b031633146130505760405162461bcd60e51b815260040161112690615ca8565b6002600e82015460ff16600281111561306b5761306b615813565b146130885760405162461bcd60e51b815260040161112690615cd6565b600061309384611c59565b9050600081116130d45760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f5245574152445360a01b6044820152606401611126565b428260090181905550808260040160008282546130f19190615a04565b909155505081546040518281526001600160a01b039091169085907fd8dbc00678cdeb812d1660863c3d845d199d828cd02c9278b1ac8f359a1394369060200160405180910390a361010054825461010154604051631b41835160e31b81526001600160a01b039384169363da0c1a889361317793908216929116908690600401615c15565b600060405180830381600087803b15801561319157600080fd5b505af1158015611603573d6000803e3d6000fd5b60018060fb5416600014806131c057506131c0600033612f2d565b6131dc5760405162461bcd60e51b815260040161112690615afe565b6131e4613e74565b6131ee3383614056565b61010054610101546118b7916001600160a01b039182169133911685613e1c565b600054610100900460ff1661322a5760005460ff161561322e565b303b155b6132915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611126565b600054610100900460ff161580156132b3576000805461ffff19166101011790555b8183116132f45760405162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f5745494748545360881b6044820152606401611126565b6001600160a01b03841661331a5760405162461bcd60e51b815260040161112690615c52565b61335d898b89600081518110613332576133326159d8565b60200260200101518a60008151811061334d5761334d6159d8565b60200260200101518c8c8c613959565b604051630480051d60e31b81526001600160a01b0385169063240028e890613389908d9060040161574d565b602060405180830381865afa1580156133a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ca9190615a74565b6133e65760405162461bcd60e51b815260040161112690615a96565b6133ef85614b05565b613407600080516020615f00833981519152336144ef565b61341f600080516020615ee0833981519152336144ef565b613437600080516020615df9833981519152336144ef565b61010080546001600160a01b038087166001600160a01b031992831617835561010180548e83169316831790556101028690556101038590556040805180820182528c815260208082018d905282516101c081018452938f1680855290840152908201929092526000606082018190526080820181905260a0820181905260c0820181905260e0820181905292810183905242610120820152610140810189905261016081018390526101808101829052610105906101a081016002905281546001808201845560009384526020938490208351600f9093020180546001600160a01b03199081166001600160a01b0394851617825584860151928201805482169385169390931790925560408401516002820180549093169316929092179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b82015561018082015180518051939492939192600c8501926135d8928492019061524d565b5060208281015180516135f1926001850192019061524d565b5050506101a0820151600e8201805460ff1916600183600281111561361857613618615813565b021790555050508b6001600160a01b03168b6001600160a01b031683600080516020615e598339815191528c600081518110613656576136566159d8565b60200260200101518d600081518110613671576136716159d8565b6020026020010151604051613687929190615627565b60405180910390a48b6001600160a01b03168b6001600160a01b031683600080516020615ec08339815191528c6000815181106136c6576136c66159d8565b60200260200101518d6000815181106136e1576136e16159d8565b60200260200101516040516136f7929190615627565b60405180910390a450508015613713576000805461ff00191690555b50505050505050505050565b6060600061372d81336138f5565b6001600160a01b0384166137725760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606401611126565b600080856001600160a01b03168560405161378d9190615d0b565b600060405180830381855af49150503d80600081146137c8576040519150601f19603f3d011682016040523d82523d6000602084013e6137cd565b606091505b5091509150816137dc57600080fd5b95945050505050565b60006137f181336138f5565b509055565b600060fd54600014156138095750600090565b613816600060fd54611ae6565b60fc546138239190615a04565b905090565b60018060fb5416600014806138435750613843600033612f2d565b61385f5760405162461bcd60e51b815260040161112690615afe565b600080516020615ee083398151915261387881336138f5565b613880613e74565b61180e83613fe7565b613892826114c4565b61389c81336138f5565b61180e8383614575565b60018060fb5416600014806138c157506138c1600033612f2d565b6138dd5760405162461bcd60e51b815260040161112690615afe565b6138e5613e74565b6118b73383614744565b3b151590565b6138ff8282612f2d565b6118b757613917816001600160a01b03166014614b3d565b613922836020614b3d565b604051602001613933929190615d27565b60408051601f198184030181529082905262461bcd60e51b8252611126916004016159c5565b6001600160a01b0387166139ae5760405162461bcd60e51b815260206004820152601c60248201527b494e56414c49445f53545245414d5f4f574e45525f4144445245535360201b6044820152606401611126565b6001600160a01b038616613a035760405162461bcd60e51b815260206004820152601c60248201527b494e56414c49445f5245574152445f544f4b454e5f4144445245535360201b6044820152606401611126565b60008511613a465760405162461bcd60e51b815260206004820152601060248201526f16915493d7d3505617d1115413d4d25560821b6044820152606401611126565b60008411613a895760405162461bcd60e51b815260206004820152601060248201526f16915493d7d3525397d1115413d4d25560821b6044820152606401611126565b84841115613acf5760405162461bcd60e51b81526020600482015260136024820152721253959053125117d3525397d1115413d4d255606a1b6044820152606401611126565b81600081518110613ae257613ae26159d8565b60200260200101518514613b385760405162461bcd60e51b815260206004820152601f60248201527f4d41585f4445504f5349545f4d5553545f455155414c5f5343484544554c45006044820152606401611126565b4283600081518110613b4c57613b4c6159d8565b602002602001015111613ba15760405162461bcd60e51b815260206004820152601e60248201527f494e56414c49445f53545245414d5f45585049524154494f4e5f4441544500006044820152606401611126565b8151835114613bec5760405162461bcd60e51b8152602060048201526017602482015276494e56414c49445f5343484544554c455f56414c55455360481b6044820152606401611126565b600283511015613c335760405162461bcd60e51b815260206004820152601260248201527114d0d2115115531157d513d3d7d4d213d49560721b6044820152606401611126565b80613c755760405162461bcd60e51b81526020600482015260126024820152711253959053125117d5105557d411549253d160721b6044820152606401611126565b60015b8351811015613d9e5783613c8d600183615a1c565b81518110613c9d57613c9d6159d8565b6020026020010151848281518110613cb757613cb76159d8565b602002602001015111613d055760405162461bcd60e51b8152602060048201526016602482015275494e56414c49445f5343484544554c455f54494d455360501b6044820152606401611126565b82613d11600183615a1c565b81518110613d2157613d216159d8565b6020026020010151838281518110613d3b57613d3b6159d8565b60200260200101511115613d8c5760405162461bcd60e51b8152602060048201526018602482015277494e56414c49445f5343484544554c455f5245574152445360401b6044820152606401611126565b80613d9681615b2a565b915050613c78565b508160018351613dae9190615a1c565b81518110613dbe57613dbe6159d8565b6020026020010151600014613e135760405162461bcd60e51b815260206004820152601b60248201527a1253959053125117d4d0d2115115531157d1539117d49155d05491602a1b6044820152606401611126565b50505050505050565b61173d846323b872dd60e01b858585604051602401613e3d93929190615c15565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614cd8565b4260fd541415613e8057565b60fe5415613f4657613e95600060fd54611ae6565b60fc6000828254613ea69190615a04565b90915550506101055460015b81811015613f435760026101058281548110613ed057613ed06159d8565b60009182526020909120600e600f90920201015460ff166002811115613ef857613ef8615813565b1415613f3157613f078161138a565b6101058281548110613f1b57613f1b6159d8565b90600052602060002090600f0201600b01819055505b80613f3b81615b2a565b915050613eb2565b50505b4260fd55565b60005b8181101561173d576002610105848484818110613f6e57613f6e6159d8565b9050602002013581548110613f8557613f856159d8565b60009182526020909120600e600f90920201015460ff166002811115613fad57613fad615813565b1415613fd557613fd584848484818110613fc957613fc96159d8565b90506020020135614744565b80613fdf81615b2a565b915050613f4f565b6101055460015b8181101561180e576002610105828154811061400c5761400c6159d8565b60009182526020909120600e600f90920201015460ff16600281111561403457614034615813565b1415614044576140448382614744565b8061404e81615b2a565b915050613fee565b6001600160a01b03821660009081526101046020526040812060fe549091906140805750816140c7565b600060fe54846140909190615a33565b905060fc54816140a09190615a52565b91508060fc54836140b19190615a33565b10156140c5576140c2600183615a04565b91505b505b808260010160008282546140db9190615a04565b925050819055508060fe60008282546140f49190615a04565b925050819055508260fc600082825461410d9190615a04565b9091555050815483908390600090614126908490615a04565b90915550600090506141388242614daa565b90508060ff600082825461414c9190615a04565b92505081905550808360020160008282546141679190615a04565b90915550506101055460015b818110156141c857610105818154811061418f5761418f6159d8565b60009182526020808320600b600f90930201919091015483835260058801909152604090912055806141c081615b2a565b915050614173565b50856001600160a01b03167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee908685604051614204929190615627565b60405180910390a2505050505050565b8161424f5760405162461bcd60e51b815260206004820152600b60248201526a16915493d7d05353d5539560aa1b6044820152606401611126565b8082111561429a5760405162461bcd60e51b81526020600482015260186024820152774e4f545f454e4f5547485f5354414b455f42414c414e434560401b6044820152606401611126565b33600090815261010460205260408120600181015460fe8054929391929091906142c5908490615a1c565b9091555050600281015460ff80546000906142e1908490615a1c565b90915550506000600182018190556002820181905560fc8054849290614308908490615a1c565b9091555050600080825580805260038201602052604081208054859290614330908490615a04565b90915550506101058054600090614349576143496159d8565b90600052602060002090600f0201600a0154426143669190615a04565b60008080526004830160209081526040808320939093556003840181528282205492519283523392600080516020615f20833981519152910160405180910390a360405183815233907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a260006143e88484615a1c565b9050801561173d5761173d3382614056565b336000818152610104602090815260408083208584526003810183528184208054949055905183815290939185917f3bfce8de0db7450cc169b94323c210e69a36c6a4a58c9f5d96bec4973adce392910160405180910390a36101005461010580546001600160a01b039092169163da0c1a8891339187908110614480576144806159d8565b600091825260209091206002600f9092020101546040516001600160e01b031960e085901b1681526144c192916001600160a01b0316908690600401615c15565b600060405180830381600087803b1580156144db57600080fd5b505af1158015613e13573d6000803e3d6000fd5b6144f98282612f2d565b6118b757600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556145313390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61457f8282612f2d565b156118b757600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020615e39833981519152546001600160a01b031690565b60006118b781336138f5565b600061460e6145dc565b905061461984614ea4565b6000835111806146265750815b15614637576146358484614f37565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661260d57805460ff191660011781556040516146b290869061468390859060240161574d565b60408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052614f37565b50805460ff191681556146c36145dc565b6001600160a01b0316826001600160a01b03161461473b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401611126565b61260d85615019565b806147615760405162461bcd60e51b815260040161112690615acd565b60026101058281548110614777576147776159d8565b60009182526020909120600e600f90920201015460ff16600281111561479f5761479f615813565b146147bc5760405162461bcd60e51b815260040161112690615cd6565b6001600160a01b03821660009081526101046020526040902060018101546148265760405162461bcd60e51b815260206004820152601f60248201527f555345525f444f45535f4e4f545f484156455f41435455414c5f5354414b45006044820152606401611126565b600068fc6f7c40458122964d601f1b8260020154836005016000868152602001908152602001600020546101058681548110614864576148646159d8565b90600052602060002090600f0201600b01546148809190615a1c565b61488a9190615a33565b6148949190615a52565b9050806148a15750505050565b6000838152600383016020526040812080548392906148c1908490615a04565b90915550506101058054849081106148db576148db6159d8565b90600052602060002090600f0201600b015482600501600085815260200190815260200160002081905550610105838154811061491a5761491a6159d8565b90600052602060002090600f0201600a0154426149379190615a04565b6000848152600484016020526040902055610105805482919085908110614960576149606159d8565b90600052602060002090600f020160060160008282546149809190615a04565b909155505060008381526003830160209081526040918290205491519182526001600160a01b038616918591600080516020615f20833981519152910160405180910390a350505050565b600061010583815481106149e1576149e16159d8565b600091825260208220600d600f90920201015491505b8181101561173d576101058481548110614a1357614a136159d8565b90600052602060002090600f020160070154836101058681548110614a3a57614a3a6159d8565b90600052602060002090600f0201600c016001018381548110614a5f57614a5f6159d8565b9060005260206000200154614a749190615a33565b614a7e9190615a52565b6101058581548110614a9257614a926159d8565b90600052602060002090600f0201600c016001018281548110614ab757614ab76159d8565b60009182526020909120015580614acd81615b2a565b9150506149f7565b6040516001600160a01b03831660248201526044810182905261180e90849063a9059cbb60e01b90606401613e3d565b614b0d615059565b614b15615092565b614b206000336144ef565b614b38600080516020615ea0833981519152336144ef565b60fb55565b60606000614b4c836002615a33565b614b57906002615a04565b6001600160401b03811115614b6e57614b6e61534b565b6040519080825280601f01601f191660200182016040528015614b98576020820181803683370190505b509050600360fc1b81600081518110614bb357614bb36159d8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614be257614be26159d8565b60200101906001600160f81b031916908160001a9053506000614c06846002615a33565b614c11906001615a04565b90505b6001811115614c89576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614c4557614c456159d8565b1a60f81b828281518110614c5b57614c5b6159d8565b60200101906001600160f81b031916908160001a90535060049490941c93614c8281615d96565b9050614c14565b50831561101d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401611126565b6000614d2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150c19092919063ffffffff16565b80519091501561180e5780806020019051810190614d4b9190615a74565b61180e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611126565b60008062282072610105600081548110614dc657614dc66159d8565b90600052602060002090600f0201600c01600001600081548110614dec57614dec6159d8565b9060005260206000200154614e019190615a04565b90506000614e13630786156083615a04565b9050818411614e335761010254614e2a9086615a33565b92505050610caf565b808410614e485761010354614e2a9086615a33565b614e528282615a1c565b614e5c8583615a1c565b6101035461010254614e6e9190615a1c565b614e789088615a33565b614e829190615a33565b614e8c9190615a52565b61010354614e9a9087615a33565b6137dc9190615a04565b803b614f085760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401611126565b600080516020615e3983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b614f965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401611126565b600080846001600160a01b031684604051614fb19190615d0b565b600060405180830381855af49150503d8060008114614fec576040519150601f19603f3d011682016040523d82523d6000602084013e614ff1565b606091505b50915091506137dc8282604051806060016040528060278152602001615e79602791396150d0565b61502281614ea4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166150805760405162461bcd60e51b815260040161112690615dad565b615088615109565b615090615109565b565b600054610100900460ff166150b95760405162461bcd60e51b815260040161112690615dad565b615080615109565b6060611cdc8484600085615130565b606083156150df57508161101d565b8251156150ef5782518084602001fd5b8160405162461bcd60e51b815260040161112691906159c5565b600054610100900460ff166150905760405162461bcd60e51b815260040161112690615dad565b6060824710156151915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611126565b843b6151df5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611126565b600080866001600160a01b031685876040516151fb9190615d0b565b60006040518083038185875af1925050503d8060008114615238576040519150601f19603f3d011682016040523d82523d6000602084013e61523d565b606091505b50915091506114b98282866150d0565b828054828255906000526020600020908101928215615288579160200282015b8281111561528857825182559160200191906001019061526d565b50615294929150615298565b5090565b5b808211156152945760008155600101615299565b6000602082840312156152bf57600080fd5b81356001600160e01b03198116811461101d57600080fd5b6000806000606084860312156152ec57600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b038116811461531a57600080fd5b919050565b6000806040838503121561533257600080fd5b8235915061534260208401615303565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156153895761538961534b565b604052919050565b600082601f8301126153a257600080fd5b813560206001600160401b038211156153bd576153bd61534b565b8160051b6153cc828201615361565b92835284810182019282810190878511156153e657600080fd5b83870192505b848310156114b9578235825291830191908301906153ec565b600080600080600080600080610100898b03121561542257600080fd5b61542b89615303565b975061543960208a01615303565b965060408901359550606089013594506080890135935060a08901356001600160401b038082111561546a57600080fd5b6154768c838d01615391565b945060c08b013591508082111561548c57600080fd5b506154998b828c01615391565b92505060e089013590509295985092959890939650565b6000602082840312156154c257600080fd5b5035919050565b60008083601f8401126154db57600080fd5b5081356001600160401b038111156154f257600080fd5b6020830191508360208260051b850101111561550d57600080fd5b9250929050565b6000806000806040858703121561552a57600080fd5b84356001600160401b038082111561554157600080fd5b61554d888389016154c9565b9096509450602087013591508082111561556657600080fd5b50615573878288016154c9565b95989497509550505050565b6000806020838503121561559257600080fd5b82356001600160401b038111156155a857600080fd5b6155b4858286016154c9565b90969095509350505050565b600080604083850312156155d357600080fd5b6155dc83615303565b946020939093013593505050565b6000602082840312156155fc57600080fd5b61101d82615303565b6000806040838503121561561857600080fd5b50508035926020909101359150565b918252602082015260400190565b6000806040838503121561564857600080fd5b61565183615303565b91506020838101356001600160401b038082111561566e57600080fd5b818601915086601f83011261568257600080fd5b8135818111156156945761569461534b565b6156a6601f8201601f19168501615361565b915080825287848285010111156156bc57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000806000606086880312156156f257600080fd5b85356001600160401b038082111561570957600080fd5b61571589838a016154c9565b9097509550602088013591508082111561572e57600080fd5b5061573b888289016154c9565b96999598509660400135949350505050565b6001600160a01b0391909116815260200190565b60008060006040848603121561577657600080fd5b61577f84615303565b925060208401356001600160401b0381111561579a57600080fd5b6157a6868287016154c9565b9497909650939450505050565b600081518084526020808501945080840160005b838110156157e3578151875295820195908201906001016157c7565b509495945050505050565b60408152600061580160408301856157b3565b82810360208401526137dc81856157b3565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038c811682528b166020820152604081018a9052606081018990526080810188905260a0810187905260c0810186905260e081018590526101008101849052610120810183905261016081016003831061589a57634e487b7160e01b600052602160045260246000fd5b826101408301529c9b505050505050505050505050565b60008060008060008060008060006101208a8c0312156158d057600080fd5b6158d98a615303565b98506158e760208b01615303565b975060408a01356001600160401b038082111561590357600080fd5b61590f8d838e01615391565b985060608c013591508082111561592557600080fd5b506159328c828d01615391565b96505060808a0135945060a08a0135935061594f60c08b01615303565b925060e08a013591506101008a013590509295985092959850929598565b60005b83811015615988578181015183820152602001615970565b8381111561173d5750506000910152565b600081518084526159b181602086016020860161596d565b601f01601f19169290920160200192915050565b60208152600061101d6020830184615999565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115615a1757615a176159ee565b500190565b600082821015615a2e57615a2e6159ee565b500390565b6000816000190483118215151615615a4d57615a4d6159ee565b500290565b600082615a6f57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615a8657600080fd5b8151801515811461101d57600080fd5b6020808252601f908201527f494e56414c49445f535550504f525445445f544f4b454e5f4144445245535300604082015260600190565b60208082526017908201527610555493d49057d49155d0549114d7d0d3d35413d55391604a1b604082015260600190565b60208082526012908201527110d3d395149050d517d254d7d4105554d15160721b604082015260600190565b6000600019821415615b3e57615b3e6159ee565b5060010190565b6020808252601890820152775a45524f5f544f54414c5f4155524f52415f53484152455360401b604082015260600190565b60208082526010908201526f5a45524f5f555345525f53484152455360801b604082015260600190565b6020808252602c90820152600080516020615e1983398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c90820152600080516020615e1983398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215615c4b57600080fd5b5051919050565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b60208082526013908201527214d51491505357d393d517d41493d413d4d151606a1b604082015260600190565b60208082526014908201527324a72b20a624a22fa9aa2922a0a6afa7aba722a960611b604082015260600190565b6020808252601b908201527a494e4143544956455f4f525f50524f504f5345445f53545245414d60281b604082015260600190565b60008251615d1d81846020870161596d565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615d5981601785016020880161596d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615d8a81602884016020880161596d565b01602801949350505050565b600081615da557615da56159ee565b506000190190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe930802d0eadfb856cb83e01d1c4daa3c89e9c6d9f74cfbe13124decf2b33128a46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbce843b72f047599c26dfdab8a31d1b5f353799cab6a8482518a21f1b17871dd75416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d3062262d3b7b7b5292387920111bfa3e0597dc070a8f10f1be710f15868c22e0f7db13299c8a9e501861f04c20f69a2444829a36a363cfad4b58864709c755603a2f235c9daaf33349d300aadff2f15078a89df81bcfdd45ba11c8f816bddc6f5f1c6be51c8ec7fa7e7ddd9f798ec55927b06cfc8d9159987d1ae3358cb10b59a2646970667358221220f98ba5d1a58cc04412878209c1490c82ddbb107be71a52e43392ef81327ee8fe64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106103155760003560e01c806301ffc9a71461031a578063036877881461034f5780630c2ee55e1461037d5780630efd8310146103945780631194ebeb146103b457806312dd67fe146103d65780631c61e617146103f65780631dd00452146104165780631e0fbfa21461045b5780631fd8c5f41461047d57806320988cef14610493578063248a9ca3146104aa5780632692c59f146104ca57806326cdddb9146104ea578063275719691461050a5780632ca783f31461052a5780632e17de781461054a5780632e1a7d4d1461056a5780632f2ff15d1461058a57806335322f37146105aa57806336568abe146105bf5780633659cfe6146105df57806336630cc7146105ff5780633895a2751461061f578063389ed26714610635578063396a6c14146106575780633ba31abf146106775780633e9a44cb146106975780633ea005c8146106b75780634981912e146106d95780634f1ef2861461070757806353a4cca01461071a5780635578fdb21461073a57806357baeac8146107685780635c975abb1461078857806361d027b31461079e5780636458edd3146107bf578063687dd46c146107df5780636c4624c3146107ff5780636db8e53d1461081f57806370bc770c1461083557806372e55399146108635780637f37df3b146108835780637f51bb1f146108c8578063853828b6146108e857806386c1b4eb146108fd578063894e9a0d1461091f5780638bc34e77146109565780638d40bd031461096b578063904033221461098b57806391d14854146109ab578063993b21c1146109cb5780639c52a920146109eb578063a217fddf14610a0b578063a4c828dc14610a20578063a694fc3a14610a57578063a81c6a1514610a77578063a87430ba14610a97578063a8b0bb8314610aef578063b8e9744c14610b06578063ba0cb22b14610b26578063bb07ec1b14610b60578063be831a2e14610b76578063c892772314610b96578063cd5ba59014610bdb578063d5050aed14610bf0578063d547741f14610c10578063e335e79a14610c30578063ee13ad8e14610c46578063fe904b7a14610c66575b600080fd5b34801561032657600080fd5b5061033a6103353660046152ad565b610c7e565b60405190151581526020015b60405180910390f35b34801561035b57600080fd5b5061036f61036a3660046152d7565b610cb5565b604051908152602001610346565b34801561038957600080fd5b5061036f6101035481565b3480156103a057600080fd5b5061036f6103af36600461531f565b611024565b3480156103c057600080fd5b506103d46103cf366004615405565b611070565b005b3480156103e257600080fd5b5061036f6103f13660046154b0565b61138a565b34801561040257600080fd5b5061036f61041136600461531f565b61144d565b34801561042257600080fd5b5061036f61043136600461531f565b6001600160a01b031660009081526101046020908152604080832093835260059093019052205490565b34801561046757600080fd5b5061036f600080516020615f0083398151915281565b34801561048957600080fd5b5061036f60fd5481565b34801561049f57600080fd5b5061036f6228207281565b3480156104b657600080fd5b5061036f6104c53660046154b0565b6114c4565b3480156104d657600080fd5b506103d46104e53660046154b0565b6114d9565b3480156104f657600080fd5b506103d4610505366004615514565b61155c565b34801561051657600080fd5b506103d461052536600461557f565b61160d565b34801561053657600080fd5b506103d46105453660046155c0565b6116ba565b34801561055657600080fd5b506103d46105653660046154b0565b611743565b34801561057657600080fd5b506103d46105853660046154b0565b611813565b34801561059657600080fd5b506103d46105a536600461531f565b6118bb565b3480156105b657600080fd5b506103d46118d8565b3480156105cb57600080fd5b506103d46105da36600461531f565b6119a3565b3480156105eb57600080fd5b506103d46105fa3660046155ea565b611a1d565b34801561060b57600080fd5b5061036f61061a366004615605565b611ae6565b34801561062b57600080fd5b5061036f60fc5481565b34801561064157600080fd5b5061036f600080516020615ea083398151915281565b34801561066357600080fd5b5061036f6106723660046154b0565b611c59565b34801561068357600080fd5b506103d461069236600461531f565b611ce4565b3480156106a357600080fd5b506103d46106b23660046155c0565b611f95565b3480156106c357600080fd5b5061036f600080516020615df983398151915281565b3480156106e557600080fd5b506106f96106f43660046152d7565b611ff7565b604051610346929190615627565b6103d4610715366004615635565b6122e1565b34801561072657600080fd5b506103d46107353660046156da565b612397565b34801561074657600080fd5b506101015461075b906001600160a01b031681565b604051610346919061574d565b34801561077457600080fd5b5061036f6107833660046155ea565b612535565b34801561079457600080fd5b5061036f60fb5481565b3480156107aa57600080fd5b506101005461075b906001600160a01b031681565b3480156107cb57600080fd5b506103d46107da366004615761565b6125aa565b3480156107eb57600080fd5b506103d46107fa36600461557f565b612614565b34801561080b57600080fd5b506103d461081a3660046152d7565b61265e565b34801561082b57600080fd5b5061036f60ff5481565b34801561084157600080fd5b506108556108503660046154b0565b612676565b6040516103469291906157ee565b34801561086f57600080fd5b506103d461087e36600461557f565b612776565b34801561088f57600080fd5b5061036f61089e36600461531f565b6001600160a01b031660009081526101046020908152604080832093835260039093019052205490565b3480156108d457600080fd5b506103d46108e33660046155ea565b612869565b3480156108f457600080fd5b506103d461294c565b34801561090957600080fd5b5061036f600080516020615ee083398151915281565b34801561092b57600080fd5b5061093f61093a3660046154b0565b6129f0565b6040516103469b9a99989796959493929190615829565b34801561096257600080fd5b506103d4612ab6565b34801561097757600080fd5b506103d4610986366004615605565b612afe565b34801561099757600080fd5b506103d46109a63660046154b0565b612e3a565b3480156109b757600080fd5b5061033a6109c636600461531f565b612f2d565b3480156109d757600080fd5b5061036f6109e63660046154b0565b612f58565b3480156109f757600080fd5b506103d4610a063660046154b0565b612f87565b348015610a1757600080fd5b5061036f600081565b348015610a2c57600080fd5b5061036f610a3b3660046155ea565b6001600160a01b03166000908152610104602052604090205490565b348015610a6357600080fd5b506103d4610a723660046154b0565b6131a5565b348015610a8357600080fd5b506103d4610a923660046158b1565b61320f565b348015610aa357600080fd5b50610ad4610ab23660046155ea565b6101046020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610346565b348015610afb57600080fd5b5061036f6101025481565b610b19610b14366004615635565b61371f565b60405161034691906159c5565b348015610b3257600080fd5b5061036f610b413660046155ea565b6001600160a01b03166000908152610104602052604090206001015490565b348015610b6c57600080fd5b5061036f60fe5481565b348015610b8257600080fd5b506103d4610b91366004615605565b6137e5565b348015610ba257600080fd5b5061036f610bb136600461531f565b6001600160a01b031660009081526101046020908152604080832093835260049093019052205490565b348015610be757600080fd5b5061036f6137f6565b348015610bfc57600080fd5b506103d4610c0b3660046155ea565b613828565b348015610c1c57600080fd5b506103d4610c2b36600461531f565b613889565b348015610c3c57600080fd5b506101055461036f565b348015610c5257600080fd5b506103d4610c613660046154b0565b6138a6565b348015610c7257600080fd5b5061036f630786156081565b60006001600160e01b03198216637965db0b60e01b1480610caf57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806101058581548110610ccc57610ccc6159d8565b90600052602060002090600f0201600c019050600080610ced878787611ff7565b909250905060008083831415610dcc5784600101846001610d0e9190615a04565b81548110610d1e57610d1e6159d8565b9060005260206000200154856001018581548110610d3e57610d3e6159d8565b9060005260206000200154610d539190615a1c565b9050846000018481548110610d6a57610d6a6159d8565b60009182526020909120015485610d82866001615a04565b81548110610d9257610d926159d8565b9060005260206000200154610da79190615a1c565b610db18989615a1c565b610dbb9083615a33565b610dc59190615a52565b9150611016565b84600101846001610ddd9190615a04565b81548110610ded57610ded6159d8565b9060005260206000200154856001018581548110610e0d57610e0d6159d8565b9060005260206000200154610e229190615a1c565b9050846000018481548110610e3957610e396159d8565b60009182526020909120015485610e51866001615a04565b81548110610e6157610e616159d8565b9060005260206000200154610e769190615a1c565b8886610e83876001615a04565b81548110610e9357610e936159d8565b9060005260206000200154610ea89190615a1c565b610eb29083615a33565b610ebc9190615a52565b9150846001018381548110610ed357610ed36159d8565b906000526020600020015485600101856001610eef9190615a04565b81548110610eff57610eff6159d8565b9060005260206000200154610f149190615a1c565b610f1e9083615a04565b915084600101836001610f319190615a04565b81548110610f4157610f416159d8565b9060005260206000200154856001018481548110610f6157610f616159d8565b9060005260206000200154610f769190615a1c565b9050846000018381548110610f8d57610f8d6159d8565b60009182526020909120015485610fa5856001615a04565b81548110610fb557610fb56159d8565b9060005260206000200154610fca9190615a1c565b856000018481548110610fdf57610fdf6159d8565b906000526020600020015488610ff59190615a1c565b610fff9083615a33565b6110099190615a52565b6110139083615a04565b91505b5093505050505b9392505050565b60008261104e57506001600160a01b03811660009081526101046020526040902060010154610caf565b506001600160a01b031660009081526101046020526040902060020154919050565b600080516020615df983398151915261108981336138f5565b61109889898888888888613959565b61010054604051630480051d60e31b81526001600160a01b039091169063240028e8906110c9908b9060040161574d565b602060405180830381865afa1580156110e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110a9190615a74565b61112f5760405162461bcd60e51b815260040161112690615a96565b60405180910390fd5b600060405180604001604052808681526020018581525090506000610105805490509050610105604051806101c001604052808d6001600160a01b03168152602001336001600160a01b031681526020018c6001600160a01b031681526020018b81526020016000815260200160008152602001600081526020018a8152602001898152602001886000815181106111c9576111c96159d8565b6020026020010151815260200186815260200160008152602001848152602001600160028111156111fc576111fc615813565b905281546001808201845560009384526020938490208351600f9093020180546001600160a01b03199081166001600160a01b0394851617825584860151928201805482169385169390931790925560408401516002820180549093169316929092179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b82015561018082015180518051939492939192600c8501926112e1928492019061524d565b5060208281015180516112fa926001850192019061524d565b5050506101a0820151600e8201805460ff1916600183600281111561132157611321615813565b02179055505050896001600160a01b03168b6001600160a01b031682600080516020615e598339815191528b8d60405161135c929190615627565b60405180910390a46101015461137d906001600160a01b031633308c613e1c565b5050505050505050505050565b6000816113a95760405162461bcd60e51b815260040161112690615acd565b60ff546113ed5760405162461bcd60e51b81526020600482015260126024820152715a45524f5f53545245414d5f53484152455360701b6044820152606401611126565b60ff5468fc6f7c40458122964d601f1b6114098460fd54611ae6565b6114139190615a33565b61141d9190615a52565b6101058381548110611431576114316159d8565b90600052602060002090600f0201600b0154610caf9190615a04565b6000806114598461138a565b6001600160a01b03841660009081526101046020908152604080832088845260058101909252909120546002820154929350909168fc6f7c40458122964d601f1b816114a58487615a1c565b6114af9190615a33565b6114b99190615a52565b979650505050505050565b600090815260c9602052604090206001015490565b600080516020615ea08339815191526114f281336138f5565b60fb54828116148061150a575061150a600033612f2d565b6115565760405162461bcd60e51b815260206004820152601e60248201527f4f4e4c595f44454641554c545f41444d494e5f43414e5f554e504155534500006044820152606401611126565b5060fb55565b60018060fb5416600014806115775750611577600033612f2d565b6115935760405162461bcd60e51b815260040161112690615afe565b600080516020615ee08339815191526115ac81336138f5565b6115b4613e74565b8460005b81811015611603576115f18888838181106115d5576115d56159d8565b90506020020160208101906115ea91906155ea565b8787613f4c565b806115fb81615b2a565b9150506115b8565b5050505050505050565b60018060fb5416600014806116285750611628600033612f2d565b6116445760405162461bcd60e51b815260040161112690615afe565b600080516020615ee083398151915261165d81336138f5565b611665613e74565b8260005b818110156116b2576116a0868683818110611686576116866159d8565b905060200201602081019061169b91906155ea565b613fe7565b806116aa81615b2a565b915050611669565b505050505050565b60018060fb5416600014806116d557506116d5600033612f2d565b6116f15760405162461bcd60e51b815260040161112690615afe565b600080516020615f0083398151915261170a81336138f5565b611712613e74565b61171c8484614056565b610100546101015461173d916001600160a01b039182169133911686613e1c565b50505050565b60018060fb54166000148061175e575061175e600033612f2d565b61177a5760405162461bcd60e51b815260040161112690615afe565b60fe546117995760405162461bcd60e51b815260040161112690615b45565b33600090815261010460205260409020600101546117c95760405162461bcd60e51b815260040161112690615b77565b6117d1613e74565b60fe54336000908152610104602052604081206001015460fc549192916117f89190615a33565b6118029190615a52565b905061180e8382614214565b505050565b60018060fb54166000148061182e575061182e600033612f2d565b61184a5760405162461bcd60e51b815260040161112690615afe565b3360009081526101046020908152604080832085845260040190915290205442116118ae5760405162461bcd60e51b8152602060048201526014602482015273494e56414c49445f52454c454153455f54494d4560601b6044820152606401611126565b6118b7826143fa565b5050565b6118c4826114c4565b6118ce81336138f5565b61180e83836144ef565b60018060fb5416600014806118f357506118f3600033612f2d565b61190f5760405162461bcd60e51b815260040161112690615afe565b60fe5461192e5760405162461bcd60e51b815260040161112690615b45565b336000908152610104602052604090206001015461195e5760405162461bcd60e51b815260040161112690615b77565b611966613e74565b60fe54336000908152610104602052604081206001015460fc5491929161198d9190615a33565b6119979190615a52565b90506118b78182614214565b6001600160a01b0381163314611a135760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401611126565b6118b78282614575565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415611a665760405162461bcd60e51b815260040161112690615ba1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a986145dc565b6001600160a01b031614611abe5760405162461bcd60e51b815260040161112690615bdb565b611ac7816145f8565b60408051600080825260208201909252611ae391839190614604565b50565b600042821115611b2e5760405162461bcd60e51b8152602060048201526013602482015272494e56414c49445f4c4153545f55504441544560681b6044820152606401611126565b42821415611b3e57506000610caf565b60006101058481548110611b5457611b546159d8565b90600052602060002090600f0201600c01600001600081548110611b7a57611b7a6159d8565b90600052602060002001549050804211611b98576000915050610caf565b60006101058581548110611bae57611bae6159d8565b90600052602060002090600f0201600c0160000160016101058781548110611bd857611bd86159d8565b60009182526020909120600c600f909202010154611bf69190615a1c565b81548110611c0657611c066159d8565b90600052602060002001549050808410611c2557600092505050610caf565b60008083861115611c3857859150611c3c565b8391505b82421015611c4b575042611c4e565b50815b6114b9878383610cb5565b6000806101058381548110611c7057611c706159d8565b60009182526020909120600f9091020190506002600e82015460ff166002811115611c9d57611c9d615813565b14611cab5750600092915050565b6000611cbb848360090154611ae6565b90508160050154826003015482611cd29190615a33565b611cdc9190615a52565b949350505050565b600080516020615df9833981519152611cfd81336138f5565b82611d485760405162461bcd60e51b815260206004820152601b60248201527a4155524f52415f53545245414d5f4e4f545f52454d4f5641424c4560281b6044820152606401611126565b60006101058481548110611d5e57611d5e6159d8565b60009182526020909120600f9091020190506002600e82015460ff166002811115611d8b57611d8b615813565b14611dd15760405162461bcd60e51b815260206004820152601660248201527514d51491505357d053149150511657d4915353d5915160521b6044820152606401611126565b600e8101805460ff19169055600281015481546040516001600160a01b03928316929091169086907f661da9ced4b5d786f5b5f451a5f68af24721a01b0a65bb47fa4fdf70b80b887c90600090a4600081600401548260030154611e359190615a1c565b9050600082600601548360050154611e4d9190615a1c565b61010154909150600090611e69906001600160a01b0316612535565b6002850154909150600090611e86906001600160a01b0316612535565b610100546001870154610101549293506001600160a01b039182169263da0c1a8892918216911685881115611ebb5785611ebd565b875b6040518463ffffffff1660e01b8152600401611edb93929190615c15565b600060405180830381600087803b158015611ef557600080fd5b505af1158015611f09573d6000803e3d6000fd5b50506101005460028801546001600160a01b03918216935063da0c1a8892508a911684871115611f395784611f3b565b865b6040518463ffffffff1660e01b8152600401611f5993929190615c15565b600060405180830381600087803b158015611f7357600080fd5b505af1158015611f87573d6000803e3d6000fd5b505050505050505050505050565b60018060fb541660001480611fb05750611fb0600033612f2d565b611fcc5760405162461bcd60e51b815260040161112690615afe565b600080516020615ee0833981519152611fe581336138f5565b611fed613e74565b61173d8484614744565b60008060006101058681548110612010576120106159d8565b60009182526020909120600c600f90920201018054909150806120635760405162461bcd60e51b815260206004820152600b60248201526a4e4f5f5343484544554c4560a81b6044820152606401611126565b8585116120b05760405162461bcd60e51b815260206004820152601b60248201527a1253959053125117d49155d0549117d45551549657d411549253d1602a1b6044820152606401611126565b816000016000815481106120c6576120c66159d8565b906000526020600020015486101561211e5760405162461bcd60e51b815260206004820152601b60248201527a145551549657d0915193d49157d4d0d2115115531157d4d5105495602a1b6044820152606401611126565b8161212a600183615a1c565b8154811061213a5761213a6159d8565b906000526020600020015485111561218f5760405162461bcd60e51b8152602060048201526018602482015277145551549657d05195115497d4d0d2115115531157d1539160421b6044820152606401611126565b60015b818110156121e5578260000181815481106121af576121af6159d8565b90600052602060002001548710156121d3576121cc600182615a1c565b94506121e5565b806121dd81615b2a565b915050612192565b50816121f2600183615a1c565b81548110612202576122026159d8565b90600052602060002001548514156122265761221f600282615a1c565b925061228b565b6000612233856001615a04565b90505b8181101561228957826000018181548110612253576122536159d8565b906000526020600020015486101561227757612270600182615a1c565b9350612289565b8061228181615b2a565b915050612236565b505b828411156122d75760405162461bcd60e51b815260206004820152601960248201527824a72b20a624a22fa4a72222ac2fa1a0a621aaa620aa24a7a760391b6044820152606401611126565b5050935093915050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561232a5760405162461bcd60e51b815260040161112690615ba1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661235c6145dc565b6001600160a01b0316146123825760405162461bcd60e51b815260040161112690615bdb565b61238b826145f8565b6118b782826001614604565b60018060fb5416600014806123b257506123b2600033612f2d565b6123ce5760405162461bcd60e51b815260040161112690615afe565b600080516020615f008339815191526123e781336138f5565b8584811461242e5760405162461bcd60e51b81526020600482015260146024820152730929cac82989288be82a4a482b2be988a9c8ea8960631b6044820152606401611126565b612436613e74565b6000805b828110156124c257878782818110612454576124546159d8565b90506020020135826124669190615a04565b91506124b08a8a8381811061247d5761247d6159d8565b905060200201602081019061249291906155ea565b8989848181106124a4576124a46159d8565b90506020020135614056565b806124ba81615b2a565b91505061243a565b508481146125095760405162461bcd60e51b81526020600482015260146024820152731253959053125117d0905510d217d05353d5539560621b6044820152606401611126565b610100546101015461252a916001600160a01b039182169133911688613e1c565b505050505050505050565b610100546040516370a0823160e01b81526000916001600160a01b03808516926370a082319261256992169060040161574d565b602060405180830381865afa158015612586573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caf9190615c39565b60018060fb5416600014806125c557506125c5600033612f2d565b6125e15760405162461bcd60e51b815260040161112690615afe565b600080516020615ee08339815191526125fa81336138f5565b612602613e74565b61260d858585613f4c565b5050505050565b60018060fb54166000148061262f575061262f600033612f2d565b61264b5760405162461bcd60e51b815260040161112690615afe565b612653613e74565b61180e338484613f4c565b600061266a81336138f5565b50825491821816189055565b606080610105838154811061268d5761268d6159d8565b90600052602060002090600f0201600c0160000161010584815481106126b5576126b56159d8565b90600052602060002090600f0201600c016001018180548060200260200160405190810160405280929190818152602001828054801561271457602002820191906000526020600020905b815481526020019060010190808311612700575b505050505091508080548060200260200160405190810160405280929190818152602001828054801561276657602002820191906000526020600020905b815481526020019060010190808311612752575b5050505050905091509150915091565b60018060fb5416600014806127915750612791600033612f2d565b6127ad5760405162461bcd60e51b815260040161112690615afe565b33600090815261010460205260408120905b8381101561260d578160030160008686848181106127df576127df6159d8565b905060200201358152602001908152602001600020546000141580156128315750816004016000868684818110612818576128186159d8565b9050602002013581526020019081526020016000205442115b156128575761285785858381811061284b5761284b6159d8565b905060200201356143fa565b8061286181615b2a565b9150506127bf565b600061287581336138f5565b60fb546128b45760405162461bcd60e51b815260206004820152600d60248201526c524551554952455f504155534560981b6044820152606401611126565b6001600160a01b0382166128da5760405162461bcd60e51b815260040161112690615c52565b610100546001600160a01b03838116911614156129285760405162461bcd60e51b815260206004820152600c60248201526b53414d455f4144445245535360a01b6044820152606401611126565b5061010080546001600160a01b0319166001600160a01b0392909216919091179055565b60018060fb5416600014806129675750612967600033612f2d565b6129835760405162461bcd60e51b815260040161112690615afe565b336000908152610104602052604081206101055490915b8181101561173d576000818152600384016020526040902054158015906129d05750600081815260048401602052604090205442115b156129de576129de816143fa565b806129e881615b2a565b91505061299a565b6000806000806000806000806000806000806101058d81548110612a1657612a166159d8565b90600052602060002090600f020190508060000160009054906101000a90046001600160a01b03168160020160009054906101000a90046001600160a01b031682600301548360040154846005015485600601548660070154876009015488600b015489600a01548a600e0160009054906101000a900460ff169b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b60018060fb541660001480612ad15750612ad1600033612f2d565b612aed5760405162461bcd60e51b815260040161112690615afe565b612af5613e74565b611ae333613fe7565b60018060fb541660001480612b195750612b19600033612f2d565b612b355760405162461bcd60e51b815260040161112690615afe565b60006101058481548110612b4b57612b4b6159d8565b60009182526020909120600f9091020190506001600e82015460ff166002811115612b7857612b78615813565b14612b955760405162461bcd60e51b815260040161112690615c7b565b80546001600160a01b03163314612bbe5760405162461bcd60e51b815260040161112690615ca8565b4281600c01600001600081548110612bd857612bd86159d8565b90600052602060002001541015612c2b5760405162461bcd60e51b815260206004820152601760248201527614d51491505357d41493d413d4d05317d1561412549151604a1b6044820152606401611126565b8060070154831115612c715760405162461bcd60e51b815260206004820152600f60248201526e0a48aae82a488bea89e9ebe90928e9608b1b6044820152606401611126565b8060080154831015612cb65760405162461bcd60e51b815260206004820152600e60248201526d5245574152445f544f4f5f4c4f5760901b6044820152606401611126565b600e8101805460ff19166002179055600581018390556007810154831015612d435760008160070154826003015485612cef9190615a33565b612cf99190615a52565b90506000818360030154612d0d9190615a1c565b600384018390559050612d2086866149cb565b600183015461010154612d40916001600160a01b03918216911683614ad5565b50505b6002810154815460038301546040516001600160a01b0393841693909216918791600080516020615ec083398151915291612d7f918991615627565b60405180910390a46005810154600d82018054600090612da157612da16159d8565b906000526020600020015414612df35760405162461bcd60e51b81526020600482015260176024820152761253959053125117d4d5105495125391d7d49155d05491604a1b6044820152606401611126565b61010054600382015461010154612e18926001600160a01b0391821692911690614ad5565b61010054600282015461173d916001600160a01b039182169133911686613e1c565b600080516020615df9833981519152612e5381336138f5565b60006101058381548110612e6957612e696159d8565b60009182526020909120600f9091020190506001600e82015460ff166002811115612e9657612e96615813565b14612eb35760405162461bcd60e51b815260040161112690615c7b565b600e8101805460ff191690556003810180546000918290556002830154835460405192936001600160a01b0392831693929091169187917ffadbcbd495527ce5e10fd0cceba57d404a4625dd6ce0499c254ac523789ef3ad91a460018201546101015461173d916001600160a01b03918216911683614ad5565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006101058281548110612f6e57612f6e6159d8565b90600052602060002090600f0201600b01549050919050565b60018060fb541660001480612fa25750612fa2600033612f2d565b612fbe5760405162461bcd60e51b815260040161112690615afe565b81612ffe5760405162461bcd60e51b815260206004820152601060248201526f4155524f52415f53545245414d5f4e4160801b6044820152606401611126565b60006101058381548110613014576130146159d8565b60009182526020909120600f9091020180549091506001600160a01b031633146130505760405162461bcd60e51b815260040161112690615ca8565b6002600e82015460ff16600281111561306b5761306b615813565b146130885760405162461bcd60e51b815260040161112690615cd6565b600061309384611c59565b9050600081116130d45760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f5245574152445360a01b6044820152606401611126565b428260090181905550808260040160008282546130f19190615a04565b909155505081546040518281526001600160a01b039091169085907fd8dbc00678cdeb812d1660863c3d845d199d828cd02c9278b1ac8f359a1394369060200160405180910390a361010054825461010154604051631b41835160e31b81526001600160a01b039384169363da0c1a889361317793908216929116908690600401615c15565b600060405180830381600087803b15801561319157600080fd5b505af1158015611603573d6000803e3d6000fd5b60018060fb5416600014806131c057506131c0600033612f2d565b6131dc5760405162461bcd60e51b815260040161112690615afe565b6131e4613e74565b6131ee3383614056565b61010054610101546118b7916001600160a01b039182169133911685613e1c565b600054610100900460ff1661322a5760005460ff161561322e565b303b155b6132915760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401611126565b600054610100900460ff161580156132b3576000805461ffff19166101011790555b8183116132f45760405162461bcd60e51b815260206004820152600f60248201526e494e56414c49445f5745494748545360881b6044820152606401611126565b6001600160a01b03841661331a5760405162461bcd60e51b815260040161112690615c52565b61335d898b89600081518110613332576133326159d8565b60200260200101518a60008151811061334d5761334d6159d8565b60200260200101518c8c8c613959565b604051630480051d60e31b81526001600160a01b0385169063240028e890613389908d9060040161574d565b602060405180830381865afa1580156133a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ca9190615a74565b6133e65760405162461bcd60e51b815260040161112690615a96565b6133ef85614b05565b613407600080516020615f00833981519152336144ef565b61341f600080516020615ee0833981519152336144ef565b613437600080516020615df9833981519152336144ef565b61010080546001600160a01b038087166001600160a01b031992831617835561010180548e83169316831790556101028690556101038590556040805180820182528c815260208082018d905282516101c081018452938f1680855290840152908201929092526000606082018190526080820181905260a0820181905260c0820181905260e0820181905292810183905242610120820152610140810189905261016081018390526101808101829052610105906101a081016002905281546001808201845560009384526020938490208351600f9093020180546001600160a01b03199081166001600160a01b0394851617825584860151928201805482169385169390931790925560408401516002820180549093169316929092179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a820155610160820151600b82015561018082015180518051939492939192600c8501926135d8928492019061524d565b5060208281015180516135f1926001850192019061524d565b5050506101a0820151600e8201805460ff1916600183600281111561361857613618615813565b021790555050508b6001600160a01b03168b6001600160a01b031683600080516020615e598339815191528c600081518110613656576136566159d8565b60200260200101518d600081518110613671576136716159d8565b6020026020010151604051613687929190615627565b60405180910390a48b6001600160a01b03168b6001600160a01b031683600080516020615ec08339815191528c6000815181106136c6576136c66159d8565b60200260200101518d6000815181106136e1576136e16159d8565b60200260200101516040516136f7929190615627565b60405180910390a450508015613713576000805461ff00191690555b50505050505050505050565b6060600061372d81336138f5565b6001600160a01b0384166137725760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b6044820152606401611126565b600080856001600160a01b03168560405161378d9190615d0b565b600060405180830381855af49150503d80600081146137c8576040519150601f19603f3d011682016040523d82523d6000602084013e6137cd565b606091505b5091509150816137dc57600080fd5b95945050505050565b60006137f181336138f5565b509055565b600060fd54600014156138095750600090565b613816600060fd54611ae6565b60fc546138239190615a04565b905090565b60018060fb5416600014806138435750613843600033612f2d565b61385f5760405162461bcd60e51b815260040161112690615afe565b600080516020615ee083398151915261387881336138f5565b613880613e74565b61180e83613fe7565b613892826114c4565b61389c81336138f5565b61180e8383614575565b60018060fb5416600014806138c157506138c1600033612f2d565b6138dd5760405162461bcd60e51b815260040161112690615afe565b6138e5613e74565b6118b73383614744565b3b151590565b6138ff8282612f2d565b6118b757613917816001600160a01b03166014614b3d565b613922836020614b3d565b604051602001613933929190615d27565b60408051601f198184030181529082905262461bcd60e51b8252611126916004016159c5565b6001600160a01b0387166139ae5760405162461bcd60e51b815260206004820152601c60248201527b494e56414c49445f53545245414d5f4f574e45525f4144445245535360201b6044820152606401611126565b6001600160a01b038616613a035760405162461bcd60e51b815260206004820152601c60248201527b494e56414c49445f5245574152445f544f4b454e5f4144445245535360201b6044820152606401611126565b60008511613a465760405162461bcd60e51b815260206004820152601060248201526f16915493d7d3505617d1115413d4d25560821b6044820152606401611126565b60008411613a895760405162461bcd60e51b815260206004820152601060248201526f16915493d7d3525397d1115413d4d25560821b6044820152606401611126565b84841115613acf5760405162461bcd60e51b81526020600482015260136024820152721253959053125117d3525397d1115413d4d255606a1b6044820152606401611126565b81600081518110613ae257613ae26159d8565b60200260200101518514613b385760405162461bcd60e51b815260206004820152601f60248201527f4d41585f4445504f5349545f4d5553545f455155414c5f5343484544554c45006044820152606401611126565b4283600081518110613b4c57613b4c6159d8565b602002602001015111613ba15760405162461bcd60e51b815260206004820152601e60248201527f494e56414c49445f53545245414d5f45585049524154494f4e5f4441544500006044820152606401611126565b8151835114613bec5760405162461bcd60e51b8152602060048201526017602482015276494e56414c49445f5343484544554c455f56414c55455360481b6044820152606401611126565b600283511015613c335760405162461bcd60e51b815260206004820152601260248201527114d0d2115115531157d513d3d7d4d213d49560721b6044820152606401611126565b80613c755760405162461bcd60e51b81526020600482015260126024820152711253959053125117d5105557d411549253d160721b6044820152606401611126565b60015b8351811015613d9e5783613c8d600183615a1c565b81518110613c9d57613c9d6159d8565b6020026020010151848281518110613cb757613cb76159d8565b602002602001015111613d055760405162461bcd60e51b8152602060048201526016602482015275494e56414c49445f5343484544554c455f54494d455360501b6044820152606401611126565b82613d11600183615a1c565b81518110613d2157613d216159d8565b6020026020010151838281518110613d3b57613d3b6159d8565b60200260200101511115613d8c5760405162461bcd60e51b8152602060048201526018602482015277494e56414c49445f5343484544554c455f5245574152445360401b6044820152606401611126565b80613d9681615b2a565b915050613c78565b508160018351613dae9190615a1c565b81518110613dbe57613dbe6159d8565b6020026020010151600014613e135760405162461bcd60e51b815260206004820152601b60248201527a1253959053125117d4d0d2115115531157d1539117d49155d05491602a1b6044820152606401611126565b50505050505050565b61173d846323b872dd60e01b858585604051602401613e3d93929190615c15565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614cd8565b4260fd541415613e8057565b60fe5415613f4657613e95600060fd54611ae6565b60fc6000828254613ea69190615a04565b90915550506101055460015b81811015613f435760026101058281548110613ed057613ed06159d8565b60009182526020909120600e600f90920201015460ff166002811115613ef857613ef8615813565b1415613f3157613f078161138a565b6101058281548110613f1b57613f1b6159d8565b90600052602060002090600f0201600b01819055505b80613f3b81615b2a565b915050613eb2565b50505b4260fd55565b60005b8181101561173d576002610105848484818110613f6e57613f6e6159d8565b9050602002013581548110613f8557613f856159d8565b60009182526020909120600e600f90920201015460ff166002811115613fad57613fad615813565b1415613fd557613fd584848484818110613fc957613fc96159d8565b90506020020135614744565b80613fdf81615b2a565b915050613f4f565b6101055460015b8181101561180e576002610105828154811061400c5761400c6159d8565b60009182526020909120600e600f90920201015460ff16600281111561403457614034615813565b1415614044576140448382614744565b8061404e81615b2a565b915050613fee565b6001600160a01b03821660009081526101046020526040812060fe549091906140805750816140c7565b600060fe54846140909190615a33565b905060fc54816140a09190615a52565b91508060fc54836140b19190615a33565b10156140c5576140c2600183615a04565b91505b505b808260010160008282546140db9190615a04565b925050819055508060fe60008282546140f49190615a04565b925050819055508260fc600082825461410d9190615a04565b9091555050815483908390600090614126908490615a04565b90915550600090506141388242614daa565b90508060ff600082825461414c9190615a04565b92505081905550808360020160008282546141679190615a04565b90915550506101055460015b818110156141c857610105818154811061418f5761418f6159d8565b60009182526020808320600b600f90930201919091015483835260058801909152604090912055806141c081615b2a565b915050614173565b50856001600160a01b03167f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee908685604051614204929190615627565b60405180910390a2505050505050565b8161424f5760405162461bcd60e51b815260206004820152600b60248201526a16915493d7d05353d5539560aa1b6044820152606401611126565b8082111561429a5760405162461bcd60e51b81526020600482015260186024820152774e4f545f454e4f5547485f5354414b455f42414c414e434560401b6044820152606401611126565b33600090815261010460205260408120600181015460fe8054929391929091906142c5908490615a1c565b9091555050600281015460ff80546000906142e1908490615a1c565b90915550506000600182018190556002820181905560fc8054849290614308908490615a1c565b9091555050600080825580805260038201602052604081208054859290614330908490615a04565b90915550506101058054600090614349576143496159d8565b90600052602060002090600f0201600a0154426143669190615a04565b60008080526004830160209081526040808320939093556003840181528282205492519283523392600080516020615f20833981519152910160405180910390a360405183815233907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f759060200160405180910390a260006143e88484615a1c565b9050801561173d5761173d3382614056565b336000818152610104602090815260408083208584526003810183528184208054949055905183815290939185917f3bfce8de0db7450cc169b94323c210e69a36c6a4a58c9f5d96bec4973adce392910160405180910390a36101005461010580546001600160a01b039092169163da0c1a8891339187908110614480576144806159d8565b600091825260209091206002600f9092020101546040516001600160e01b031960e085901b1681526144c192916001600160a01b0316908690600401615c15565b600060405180830381600087803b1580156144db57600080fd5b505af1158015613e13573d6000803e3d6000fd5b6144f98282612f2d565b6118b757600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556145313390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61457f8282612f2d565b156118b757600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080516020615e39833981519152546001600160a01b031690565b60006118b781336138f5565b600061460e6145dc565b905061461984614ea4565b6000835111806146265750815b15614637576146358484614f37565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661260d57805460ff191660011781556040516146b290869061468390859060240161574d565b60408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052614f37565b50805460ff191681556146c36145dc565b6001600160a01b0316826001600160a01b03161461473b5760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b6064820152608401611126565b61260d85615019565b806147615760405162461bcd60e51b815260040161112690615acd565b60026101058281548110614777576147776159d8565b60009182526020909120600e600f90920201015460ff16600281111561479f5761479f615813565b146147bc5760405162461bcd60e51b815260040161112690615cd6565b6001600160a01b03821660009081526101046020526040902060018101546148265760405162461bcd60e51b815260206004820152601f60248201527f555345525f444f45535f4e4f545f484156455f41435455414c5f5354414b45006044820152606401611126565b600068fc6f7c40458122964d601f1b8260020154836005016000868152602001908152602001600020546101058681548110614864576148646159d8565b90600052602060002090600f0201600b01546148809190615a1c565b61488a9190615a33565b6148949190615a52565b9050806148a15750505050565b6000838152600383016020526040812080548392906148c1908490615a04565b90915550506101058054849081106148db576148db6159d8565b90600052602060002090600f0201600b015482600501600085815260200190815260200160002081905550610105838154811061491a5761491a6159d8565b90600052602060002090600f0201600a0154426149379190615a04565b6000848152600484016020526040902055610105805482919085908110614960576149606159d8565b90600052602060002090600f020160060160008282546149809190615a04565b909155505060008381526003830160209081526040918290205491519182526001600160a01b038616918591600080516020615f20833981519152910160405180910390a350505050565b600061010583815481106149e1576149e16159d8565b600091825260208220600d600f90920201015491505b8181101561173d576101058481548110614a1357614a136159d8565b90600052602060002090600f020160070154836101058681548110614a3a57614a3a6159d8565b90600052602060002090600f0201600c016001018381548110614a5f57614a5f6159d8565b9060005260206000200154614a749190615a33565b614a7e9190615a52565b6101058581548110614a9257614a926159d8565b90600052602060002090600f0201600c016001018281548110614ab757614ab76159d8565b60009182526020909120015580614acd81615b2a565b9150506149f7565b6040516001600160a01b03831660248201526044810182905261180e90849063a9059cbb60e01b90606401613e3d565b614b0d615059565b614b15615092565b614b206000336144ef565b614b38600080516020615ea0833981519152336144ef565b60fb55565b60606000614b4c836002615a33565b614b57906002615a04565b6001600160401b03811115614b6e57614b6e61534b565b6040519080825280601f01601f191660200182016040528015614b98576020820181803683370190505b509050600360fc1b81600081518110614bb357614bb36159d8565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614be257614be26159d8565b60200101906001600160f81b031916908160001a9053506000614c06846002615a33565b614c11906001615a04565b90505b6001811115614c89576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614c4557614c456159d8565b1a60f81b828281518110614c5b57614c5b6159d8565b60200101906001600160f81b031916908160001a90535060049490941c93614c8281615d96565b9050614c14565b50831561101d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401611126565b6000614d2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166150c19092919063ffffffff16565b80519091501561180e5780806020019051810190614d4b9190615a74565b61180e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401611126565b60008062282072610105600081548110614dc657614dc66159d8565b90600052602060002090600f0201600c01600001600081548110614dec57614dec6159d8565b9060005260206000200154614e019190615a04565b90506000614e13630786156083615a04565b9050818411614e335761010254614e2a9086615a33565b92505050610caf565b808410614e485761010354614e2a9086615a33565b614e528282615a1c565b614e5c8583615a1c565b6101035461010254614e6e9190615a1c565b614e789088615a33565b614e829190615a33565b614e8c9190615a52565b61010354614e9a9087615a33565b6137dc9190615a04565b803b614f085760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401611126565b600080516020615e3983398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b614f965760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401611126565b600080846001600160a01b031684604051614fb19190615d0b565b600060405180830381855af49150503d8060008114614fec576040519150601f19603f3d011682016040523d82523d6000602084013e614ff1565b606091505b50915091506137dc8282604051806060016040528060278152602001615e79602791396150d0565b61502281614ea4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166150805760405162461bcd60e51b815260040161112690615dad565b615088615109565b615090615109565b565b600054610100900460ff166150b95760405162461bcd60e51b815260040161112690615dad565b615080615109565b6060611cdc8484600085615130565b606083156150df57508161101d565b8251156150ef5782518084602001fd5b8160405162461bcd60e51b815260040161112691906159c5565b600054610100900460ff166150905760405162461bcd60e51b815260040161112690615dad565b6060824710156151915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611126565b843b6151df5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611126565b600080866001600160a01b031685876040516151fb9190615d0b565b60006040518083038185875af1925050503d8060008114615238576040519150601f19603f3d011682016040523d82523d6000602084013e61523d565b606091505b50915091506114b98282866150d0565b828054828255906000526020600020908101928215615288579160200282015b8281111561528857825182559160200191906001019061526d565b50615294929150615298565b5090565b5b808211156152945760008155600101615299565b6000602082840312156152bf57600080fd5b81356001600160e01b03198116811461101d57600080fd5b6000806000606084860312156152ec57600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b038116811461531a57600080fd5b919050565b6000806040838503121561533257600080fd5b8235915061534260208401615303565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156153895761538961534b565b604052919050565b600082601f8301126153a257600080fd5b813560206001600160401b038211156153bd576153bd61534b565b8160051b6153cc828201615361565b92835284810182019282810190878511156153e657600080fd5b83870192505b848310156114b9578235825291830191908301906153ec565b600080600080600080600080610100898b03121561542257600080fd5b61542b89615303565b975061543960208a01615303565b965060408901359550606089013594506080890135935060a08901356001600160401b038082111561546a57600080fd5b6154768c838d01615391565b945060c08b013591508082111561548c57600080fd5b506154998b828c01615391565b92505060e089013590509295985092959890939650565b6000602082840312156154c257600080fd5b5035919050565b60008083601f8401126154db57600080fd5b5081356001600160401b038111156154f257600080fd5b6020830191508360208260051b850101111561550d57600080fd5b9250929050565b6000806000806040858703121561552a57600080fd5b84356001600160401b038082111561554157600080fd5b61554d888389016154c9565b9096509450602087013591508082111561556657600080fd5b50615573878288016154c9565b95989497509550505050565b6000806020838503121561559257600080fd5b82356001600160401b038111156155a857600080fd5b6155b4858286016154c9565b90969095509350505050565b600080604083850312156155d357600080fd5b6155dc83615303565b946020939093013593505050565b6000602082840312156155fc57600080fd5b61101d82615303565b6000806040838503121561561857600080fd5b50508035926020909101359150565b918252602082015260400190565b6000806040838503121561564857600080fd5b61565183615303565b91506020838101356001600160401b038082111561566e57600080fd5b818601915086601f83011261568257600080fd5b8135818111156156945761569461534b565b6156a6601f8201601f19168501615361565b915080825287848285010111156156bc57600080fd5b80848401858401376000848284010152508093505050509250929050565b6000806000806000606086880312156156f257600080fd5b85356001600160401b038082111561570957600080fd5b61571589838a016154c9565b9097509550602088013591508082111561572e57600080fd5b5061573b888289016154c9565b96999598509660400135949350505050565b6001600160a01b0391909116815260200190565b60008060006040848603121561577657600080fd5b61577f84615303565b925060208401356001600160401b0381111561579a57600080fd5b6157a6868287016154c9565b9497909650939450505050565b600081518084526020808501945080840160005b838110156157e3578151875295820195908201906001016157c7565b509495945050505050565b60408152600061580160408301856157b3565b82810360208401526137dc81856157b3565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038c811682528b166020820152604081018a9052606081018990526080810188905260a0810187905260c0810186905260e081018590526101008101849052610120810183905261016081016003831061589a57634e487b7160e01b600052602160045260246000fd5b826101408301529c9b505050505050505050505050565b60008060008060008060008060006101208a8c0312156158d057600080fd5b6158d98a615303565b98506158e760208b01615303565b975060408a01356001600160401b038082111561590357600080fd5b61590f8d838e01615391565b985060608c013591508082111561592557600080fd5b506159328c828d01615391565b96505060808a0135945060a08a0135935061594f60c08b01615303565b925060e08a013591506101008a013590509295985092959850929598565b60005b83811015615988578181015183820152602001615970565b8381111561173d5750506000910152565b600081518084526159b181602086016020860161596d565b601f01601f19169290920160200192915050565b60208152600061101d6020830184615999565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115615a1757615a176159ee565b500190565b600082821015615a2e57615a2e6159ee565b500390565b6000816000190483118215151615615a4d57615a4d6159ee565b500290565b600082615a6f57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215615a8657600080fd5b8151801515811461101d57600080fd5b6020808252601f908201527f494e56414c49445f535550504f525445445f544f4b454e5f4144445245535300604082015260600190565b60208082526017908201527610555493d49057d49155d0549114d7d0d3d35413d55391604a1b604082015260600190565b60208082526012908201527110d3d395149050d517d254d7d4105554d15160721b604082015260600190565b6000600019821415615b3e57615b3e6159ee565b5060010190565b6020808252601890820152775a45524f5f544f54414c5f4155524f52415f53484152455360401b604082015260600190565b60208082526010908201526f5a45524f5f555345525f53484152455360801b604082015260600190565b6020808252602c90820152600080516020615e1983398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c90820152600080516020615e1983398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215615c4b57600080fd5b5051919050565b6020808252600f908201526e494e56414c49445f4144445245535360881b604082015260600190565b60208082526013908201527214d51491505357d393d517d41493d413d4d151606a1b604082015260600190565b60208082526014908201527324a72b20a624a22fa9aa2922a0a6afa7aba722a960611b604082015260600190565b6020808252601b908201527a494e4143544956455f4f525f50524f504f5345445f53545245414d60281b604082015260600190565b60008251615d1d81846020870161596d565b9190910192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615d5981601785016020880161596d565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615d8a81602884016020880161596d565b01602801949350505050565b600081615da557615da56159ee565b506000190190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe930802d0eadfb856cb83e01d1c4daa3c89e9c6d9f74cfbe13124decf2b33128a46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbce843b72f047599c26dfdab8a31d1b5f353799cab6a8482518a21f1b17871dd75416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d3062262d3b7b7b5292387920111bfa3e0597dc070a8f10f1be710f15868c22e0f7db13299c8a9e501861f04c20f69a2444829a36a363cfad4b58864709c755603a2f235c9daaf33349d300aadff2f15078a89df81bcfdd45ba11c8f816bddc6f5f1c6be51c8ec7fa7e7ddd9f798ec55927b06cfc8d9159987d1ae3358cb10b59a2646970667358221220f98ba5d1a58cc04412878209c1490c82ddbb107be71a52e43392ef81327ee8fe64736f6c634300080a0033",
  "devdoc": {
    "author": "Aurora Team",
    "details": "Implementation of Jet staking contract      This contract implements the staking mechanics for AURORA ERC20 token.      A user can stake any amount of AURORA tokens, and get rewarded in both      AURORA and other stream tokens based on the rewards schedules.      Stream rewards can be claimed any time however AURORA can't be claimed      unless the user unstakes his full/partial amount of shares.      This contract is AdminControlled which has a tremendous power. However      hopfully it be governed by a community wallet.",
    "kind": "dev",
    "methods": {
      "adminDelegatecall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow": "delegatecall",
        "details": "adminDelegatecall allows this contract to delegate calls to a target contract and execute it in the context of this contract. Only default admin role can call this function.",
        "params": {
          "data": "is the ABI encoded function signature and its values.",
          "target": "the target contract address"
        }
      },
      "adminPause(uint256)": {
        "details": "adminPause pauses this contract. Only pause role or default admin role can access this function.",
        "params": {
          "flags": "flags variable is used for pausing this contract."
        }
      },
      "adminSstore(uint256,uint256)": {
        "details": "adminSstore updates the state variable value. only default admin role can call this function.",
        "params": {
          "key": "is the storage slot of the state variable",
          "value": "is the state variable value"
        }
      },
      "adminSstoreWithMask(uint256,uint256,uint256)": {
        "details": "adminSstoreWithMask similar to adminSstore except it updates the state variable value after xor-ing this value with the old value and the mask, so the new value should be a result of xor(and(xor(value, oldval), mask), oldval). Only default admin role can call this function.",
        "params": {
          "key": "is the storage slot of the state variable",
          "mask": "this value is used in calculating the new value",
          "value": "is the state variable value"
        }
      },
      "batchClaimOnBehalfOfAnotherUser(address,uint256[])": {
        "details": "batchClaimOnBehalfOfAnotherUser when gas limits prevent users from claiming all.",
        "params": {
          "account": "the user account address.",
          "streamIds": "to claim."
        }
      },
      "batchClaimOnBehalfOfOtherUsers(address[],uint256[])": {
        "details": "Claim all stream rewards on behalf of other users.",
        "params": {
          "accounts": "the user account addresses."
        }
      },
      "batchMoveRewardsToPending(uint256[])": {
        "details": "moves a set of stream Id rewards to pending. Allows user to select stream ids to claim from UI.",
        "params": {
          "streamIds": "stream indexes"
        }
      },
      "batchWithdraw(uint256[])": {
        "details": "withdraw a set of stream Ids. Allows user to select stream ids to withdraw from UI.",
        "params": {
          "streamIds": "to withdraw."
        }
      },
      "cancelStreamProposal(uint256)": {
        "details": "cancelStreamProposal cancels a proposal any time before the stream becomes active (created).",
        "params": {
          "streamId": "the stream index"
        }
      },
      "claimAllOnBehalfOfAnotherUser(address)": {
        "details": "Claim all stream rewards on behalf of another user.",
        "params": {
          "account": "the user account address."
        }
      },
      "claimAllOnBehalfOfOtherUsers(address[])": {
        "details": "Claim all stream rewards on behalf of other users.",
        "params": {
          "accounts": "the user account addresses."
        }
      },
      "claimOnBehalfOfAnotherUser(address,uint256)": {
        "details": "Claim a stream's rewards on behalf of another user.",
        "params": {
          "account": "the user account address.",
          "streamId": "to claim."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "createStream(uint256,uint256)": {
        "details": "create new stream (only stream owner) stream owner must approve reward tokens to this contract.",
        "params": {
          "streamId": "stream id"
        }
      },
      "getAmountOfShares(uint256,address)": {
        "details": "gets a user stream shares",
        "params": {
          "account": "the user address",
          "streamId": "stream index"
        },
        "returns": {
          "_0": "user stream shares"
        }
      },
      "getLatestRewardPerShare(uint256)": {
        "details": "calculates and gets the latest reward per share (RPS) for a stream",
        "params": {
          "streamId": "stream index"
        },
        "returns": {
          "_0": "streams[streamId].rps + scheduled reward up till now"
        }
      },
      "getPending(uint256,address)": {
        "details": "gets the user's stream pending reward",
        "params": {
          "account": "user account",
          "streamId": "stream index"
        },
        "returns": {
          "_0": "user.pendings[streamId]"
        }
      },
      "getReleaseTime(uint256,address)": {
        "details": "gets the user's stream reward release time",
        "params": {
          "account": "user account",
          "streamId": "stream index"
        },
        "returns": {
          "_0": "user.releaseTime[streamId]"
        }
      },
      "getRewardPerShare(uint256)": {
        "details": "gets reward per share (RPS) for a stream",
        "params": {
          "streamId": "stream index"
        },
        "returns": {
          "_0": "streams[streamId].rps"
        }
      },
      "getRewardPerShareForUser(uint256,address)": {
        "details": "gets the user's reward per share (RPS) for a stream",
        "params": {
          "streamId": "stream index"
        },
        "returns": {
          "_0": "user.rpsDuringLastClaim[streamId]"
        }
      },
      "getRewardsAmount(uint256,uint256)": {
        "details": "calculates and gets the latest released rewards.",
        "params": {
          "streamId": "stream index"
        },
        "returns": {
          "_0": "rewards released since last update."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getStream(uint256)": {
        "details": "get the stream data",
        "params": {
          "streamId": "the stream index"
        }
      },
      "getStreamClaimableAmount(uint256,address)": {
        "details": "gets the user's stream claimable amount",
        "params": {
          "streamId": "stream index"
        },
        "returns": {
          "_0": "(latesRPS - user.rpsDuringLastClaim) * user.shares"
        }
      },
      "getStreamOwnerClaimableAmount(uint256)": {
        "details": "Stream owner claimable AURORA.",
        "params": {
          "streamId": "the stream index"
        }
      },
      "getStreamSchedule(uint256)": {
        "details": "get the stream schedule data",
        "params": {
          "streamId": "the stream index"
        }
      },
      "getStreamsCount()": {
        "details": "get the streams count",
        "returns": {
          "_0": "streams.length"
        }
      },
      "getTotalAmountOfStakedAurora()": {
        "details": "gets the total amount of staked aurora",
        "returns": {
          "_0": "totalAmountOfStakedAurora + latest reward schedule"
        }
      },
      "getTreasuryBalance(address)": {
        "details": "Get the treasury balance",
        "params": {
          "token": "the token address"
        }
      },
      "getUserShares(address)": {
        "details": "gets the user shares",
        "params": {
          "account": "the user address"
        },
        "returns": {
          "_0": "user shares"
        }
      },
      "getUserTotalDeposit(address)": {
        "details": "gets the total user deposit",
        "params": {
          "account": "the user address"
        },
        "returns": {
          "_0": "user total deposit in (AURORA)"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(address,address,uint256[],uint256[],uint256,uint256,address,uint256,uint256)": {
        "details": "initialize the contract and deploys the first stream (AURORA)",
        "params": {
          "_flags": "admin controlled contract flags",
          "_maxWeight": "max stream reward weighting coefficient",
          "_minWeight": "min stream reward weighting coefficient",
          "_treasury": "the Aurora treasury contract address",
          "aurora": "token contract address",
          "scheduleRewards": "init the schedule amounts",
          "scheduleTimes": "init the schedule time",
          "tauAuroraStream": "release time constant per stream (e.g AURORA stream)"
        }
      },
      "moveAllRewardsToPending()": {
        "details": "moves all the user rewards to pending reward."
      },
      "moveRewardsToPending(uint256)": {
        "details": "moves the reward for specific stream Id to pending rewards. It will require a waiting time untill it get released. Users call this in function in order to claim rewards.",
        "params": {
          "streamId": "stream index"
        }
      },
      "proposeStream(address,address,uint256,uint256,uint256,uint256[],uint256[],uint256)": {
        "details": "An admin of the staking contract can whitelist (propose) a stream. Whitelisting of the stream provides the option for the stream owner (presumably the issuing party of a specific token) to deposit some ERC-20 tokens on the staking contract and potentially get in return some AURORA tokens. Deposited ERC-20 tokens will be distributed to the stakers over some period of time.",
        "params": {
          "auroraDepositAmount": "Amount of the AURORA deposited by the Admin.",
          "maxDepositAmount": "The upper amount of the tokens that should be deposited by the stream owner",
          "rewardToken": "the address of the ERC-20 tokens to be deposited in the stream",
          "scheduleRewards": "remaining rewards to be delivered at the beginning of each scheduled interval. Last element is always zero. First value (in scheduleRewards) from array is supposed to be a total amount of rewards for stream.",
          "scheduleTimes": "timestamp denoting the start of each scheduled interval. Last element is the end of the stream.",
          "streamOwner": "only this account would be able to create a stream",
          "tau": "the tau is (pending release period) for this stream (e.g one day)"
        }
      },
      "releaseAuroraRewardsToStreamOwner(uint256)": {
        "details": "the release of AURORA tokens to the stream owner is subjected to the same schedule as rewards. Thus if for a specific moment in time 30% of the rewards are distributed, then it means that 30% of the AURORA deposit can be withdrawn by the stream owner too. called by the stream owner",
        "params": {
          "streamId": "the stream index"
        }
      },
      "removeStream(uint256,address)": {
        "details": "removes a stream (only default admin role)",
        "params": {
          "streamFundReceiver": "receives the rest of the reward tokens in the stream",
          "streamId": "stream index"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "rewardsSchedule(uint256,uint256,uint256)": {
        "details": "calculate the total amount of the released tokens within a period (start & end)",
        "params": {
          "end": "is the end timestamp (e.g block.timestamp .. now)",
          "start": "is the start timestamp within the schedule",
          "streamId": "the stream index"
        },
        "returns": {
          "_0": "amount of the released tokens for that period"
        }
      },
      "stake(uint256)": {
        "details": "a user stakes amount of AURORA tokens The user should approve these tokens to the treasury contract in order to complete the stake.",
        "params": {
          "amount": "is the AURORA amount."
        }
      },
      "stakeOnBehalfOfAnotherUser(address,uint256)": {
        "details": "stakeOnBehalfOfAnotherUser is called for airdropping Aurora users",
        "params": {
          "account": "the account address",
          "amount": "in AURORA tokens WARNING: rewards are not claimed during stake. Airdrop script must claim or only distribute to accounts without stake"
        }
      },
      "stakeOnBehalfOfOtherUsers(address[],uint256[],uint256)": {
        "details": "stakeOnBehalfOfOtherUsers called for airdropping Aurora users",
        "params": {
          "accounts": "the account address",
          "amounts": "in AURORA tokens",
          "batchAmount": "equals to the sum of amounts WARNING: rewards are not claimed during stake. Airdrop script must claim or only distribute to accounts without stake"
        }
      },
      "startEndScheduleIndex(uint256,uint256,uint256)": {
        "details": "gets start index and end index in a stream schedule",
        "params": {
          "end": "end time (in seconds)",
          "start": "start time (in seconds)",
          "streamId": "stream index"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unstake(uint256)": {
        "details": "unstake amount from user shares value. The rest is re-staked",
        "params": {
          "amount": "to unstake"
        }
      },
      "unstakeAll()": {
        "details": "unstake all the user's shares"
      },
      "updateTreasury(address)": {
        "details": "restricted for the admin only. Admin should pause this contract before changing the treasury address by setting the pause =1 (for changing this variable, call adminPause(1))",
        "params": {
          "_treasury": "treasury contract address for the reward tokens"
        }
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(uint256)": {
        "details": "withdraw amount in the pending pool. User should wait for pending time (tau constant) in order to be able to withdraw.",
        "params": {
          "streamId": "stream index"
        }
      },
      "withdrawAll()": {
        "details": "withdraw all claimed balances which have passed pending periode. This function will reach gas limit with too many streams, so the frontend will allow individual stream withdrawals and disable withdrawAll."
      }
    },
    "title": "JetStakingV1",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getStream(uint256)": {
        "notice": "this function doesn't return the stream schedule due to some stake slots limitations. To get the stream schedule, refer to getStreamSchedule"
      },
      "initialize(address,address,uint256[],uint256[],uint256,uint256,address,uint256,uint256)": {
        "notice": "By calling this function, the deployer of this contract must make sure that the AURORA reward amount was deposited to the treasury contract before initializing of the default AURORA stream."
      },
      "proposeStream(address,address,uint256,uint256,uint256,uint256[],uint256[],uint256)": {
        "notice": "treasury manager must call"
      },
      "updateTreasury(address)": {
        "notice": "updates treasury account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 824,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 827,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 806,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1001,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1592,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1901,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "_roles",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 335,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1925,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "paused",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 2148,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "totalAmountOfStakedAurora",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 2150,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "touchedAt",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 2152,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "totalAuroraShares",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 2154,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "totalStreamShares",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 2156,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "treasury",
        "offset": 0,
        "slot": "256",
        "type": "t_address"
      },
      {
        "astId": 2158,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "auroraToken",
        "offset": 0,
        "slot": "257",
        "type": "t_address"
      },
      {
        "astId": 2160,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "maxWeight",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 2162,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "minWeight",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 2228,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "users",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_struct(User)2185_storage)"
      },
      {
        "astId": 2232,
        "contract": "contracts/JetStakingV1.sol:JetStakingV1",
        "label": "streams",
        "offset": 0,
        "slot": "261",
        "type": "t_array(t_struct(Stream)2223_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Stream)2223_storage)dyn_storage": {
        "base": "t_struct(Stream)2223_storage",
        "encoding": "dynamic_array",
        "label": "struct JetStakingV1.Stream[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(StreamStatus)2166": {
        "encoding": "inplace",
        "label": "enum JetStakingV1.StreamStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(User)2185_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct JetStakingV1.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)2185_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Schedule)2192_storage": {
        "encoding": "inplace",
        "label": "struct JetStakingV1.Schedule",
        "members": [
          {
            "astId": 2188,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2191,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stream)2223_storage": {
        "encoding": "inplace",
        "label": "struct JetStakingV1.Stream",
        "members": [
          {
            "astId": 2194,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2196,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "manager",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2198,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "rewardToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2200,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "auroraDepositAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2202,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "auroraClaimedAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2204,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "rewardDepositAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2206,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "rewardClaimedAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2208,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "maxDepositAmount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2210,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "minDepositAmount",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2212,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "lastTimeOwnerClaimed",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 2214,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "tau",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 2216,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "rps",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 2219,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "schedule",
            "offset": 0,
            "slot": "12",
            "type": "t_struct(Schedule)2192_storage"
          },
          {
            "astId": 2222,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "status",
            "offset": 0,
            "slot": "14",
            "type": "t_enum(StreamStatus)2166"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(User)2185_storage": {
        "encoding": "inplace",
        "label": "struct JetStakingV1.User",
        "members": [
          {
            "astId": 2168,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2170,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "auroraShares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2172,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "streamShares",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2176,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "pendings",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 2180,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "releaseTime",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 2184,
            "contract": "contracts/JetStakingV1.sol:JetStakingV1",
            "label": "rpsDuringLastClaim",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}