{
  "language": "Solidity",
  "sources": {
    "contracts/AdminControlled.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"./DelegateCallGuard.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\ncontract AdminControlled is DelegateCallGuard, AccessControlUpgradeable {\n    address public superAdmin;\n    uint256 public paused;\n\n    bytes32 public constant PAUSE_ROLE = keccak256(\"PAUSE_ROLE\");\n    bytes32 public constant SUPER_ADMIN_ROLE = keccak256(\"SUPER_ADMIN_ROLE\");\n\n    event OwnershipTransferred(address oldAdmin, address newAdmin);\n\n    modifier pausable(uint256 flag) {\n        require(\n            (paused & flag) == 0 || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()),\n            \"Paused\"\n        );\n        _;\n    }\n\n    function __AdminControlled_init(uint256 _flags) public initializer {\n        __AccessControl_init();\n        paused = _flags;\n        superAdmin = msg.sender;\n        _grantRole(SUPER_ADMIN_ROLE, msg.sender);\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(PAUSE_ROLE, msg.sender);\n    }\n\n    function adminPause(uint256 flags) external onlyRole(PAUSE_ROLE) {\n        paused = flags;\n    }\n\n    function updateSuperAdmin(address newAdmin)\n        external\n        virtual\n        onlyRole(SUPER_ADMIN_ROLE)\n    {\n        require(newAdmin != address(0), \"INVALID_ADDRESS\");\n        require(newAdmin != superAdmin, \"SAME_ADDRESS\");\n        superAdmin = newAdmin;\n        _grantRole(SUPER_ADMIN_ROLE, newAdmin);\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\n        _grantRole(PAUSE_ROLE, newAdmin);\n        _revokeRole(SUPER_ADMIN_ROLE, _msgSender());\n        _revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\n        _revokeRole(PAUSE_ROLE, _msgSender());\n    }\n\n    function adminSstore(uint256 key, uint256 value)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        assembly {\n            sstore(key, value)\n        }\n    }\n\n    function adminSstoreWithMask(\n        uint256 key,\n        uint256 value,\n        uint256 mask\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        assembly {\n            let oldval := sload(key)\n            sstore(key, xor(and(xor(value, oldval), mask), oldval))\n        }\n    }\n\n    function adminSendEth(address payable destination, uint256 amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        //slither-disable-next-line arbitrary-send\n        destination.transfer(amount);\n    }\n\n    function adminReceiveEth() external payable {}\n\n    /// @custom:oz-upgrades-unsafe-allow delegatecall\n    function adminDelegatecall(address target, bytes memory data)\n        external\n        payable\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        onlyDelegateCall\n        returns (bytes memory)\n    {\n        (bool success, bytes memory rdata) = target.delegatecall(data);\n        require(success);\n        return rdata;\n    }\n}\n"
    },
    "contracts/DelegateCallGuard.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\n/// This contract is only used by the adminControlled in order to\n/// guard any unsafe delegatcall and check that is only called throught the\n/// proxy contract not the implementation contract.\n/// More details https://docs.openzeppelin.com/upgrades-plugins/1.x/faq#delegatecall-selfdestruct\nabstract contract DelegateCallGuard {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable self = address(this);\n\n    function checkDelegateCall() private view {\n        require(address(this) != self);\n    }\n\n    modifier onlyDelegateCall() {\n        checkDelegateCall();\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"./ITreasury.sol\";\nimport \"./AdminControlled.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ncontract Treasury is ITreasury, AdminControlled {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    mapping(address => bool) public isSupportedToken;\n    mapping(address => bool) public isManager;\n    //events\n    event ManagerAdded(\n        address indexed manager,\n        address indexed addedBy,\n        uint256 timestamp\n    );\n    event ManagerRemoved(\n        address indexed manager,\n        address indexed removedBy,\n        uint256 timestamp\n    );\n    event TokenAdded(\n        address indexed token,\n        address indexed addedBy,\n        uint256 timestamp\n    );\n    event TokenRemoved(\n        address indexed token,\n        address indexed addedBy,\n        uint256 timestamp\n    );\n\n    /// @dev Throws if called by any account other than the owner\n    modifier onlyManager() {\n        require(isManager[msg.sender], \"SENDER_IS_NOT_MANAGER\");\n        _;\n    }\n\n    /// @notice initializes ownable Treasury with list of managers and supported tokens\n    /// @param _managers list of managers\n    /// @param _supportedTokens list of supported tokens\n    function initialize(\n        address[] memory _managers,\n        address[] memory _supportedTokens,\n        uint256 _flags\n    ) external initializer {\n        for (uint256 i = 0; i < _managers.length; i++) {\n            require(_managers[i] != address(0), \"INVALID_MANAGER_ADDRESS\");\n            isManager[_managers[i]] = true;\n        }\n\n        for (uint256 i = 0; i < _supportedTokens.length; i++) {\n            require(_supportedTokens[i] != address(0), \"INVALID_TOKEN_ADDRESS\");\n            isSupportedToken[_supportedTokens[i]] = true;\n        }\n        __AdminControlled_init(_flags);\n    }\n\n    /// @notice allows operator to transfer supported tokens on befalf of Treasury\n    /// @dev used to allow jet staking contract to pay reverds from Treasury balance\n    /// @param _operator operator\n    /// @param _supportedTokens list of supported tokens to approve\n    function approveTokensTo(\n        address[] memory _supportedTokens,\n        uint256[] memory _amounts,\n        address _operator\n    ) external onlyManager {\n        require(\n            _amounts.length == _supportedTokens.length,\n            \"INVALID_APPROVE_TOKEN_PARAMETERS\"\n        );\n        for (uint256 i = 0; i < _supportedTokens.length; i++) {\n            IERC20Upgradeable(_supportedTokens[i]).safeIncreaseAllowance(\n                _operator,\n                _amounts[i]\n            );\n        }\n    }\n\n    /// @notice transfers token amount from Treasury balance to user.\n    /// @dev Used by jet staking contracts\n    /// @param _user user to transfer tokens to\n    /// @param _token token to transfer to user\n    /// @param _amount token to transfer to user\n    function payRewards(\n        address _user,\n        address _token,\n        uint256 _amount\n    ) external pausable(1) onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(isSupportedToken[_token], \"TOKEN_IS_NOT_SUPPORTED\");\n        IERC20Upgradeable(_token).safeTransfer(_user, _amount);\n    }\n\n    /// @notice adds token as a supproted rewards token by Treasury\n    /// @param _token ERC20 token address\n    function addSupportedToken(address _token) external onlyManager {\n        require(!isSupportedToken[_token], \"TOKEN_ALREADY_EXISTS\");\n        isSupportedToken[_token] = true;\n        emit TokenAdded(_token, msg.sender, block.timestamp);\n    }\n\n    /// @notice removed token as a supproted rewards token by Treasury\n    /// @param _token ERC20 token address\n    function removeSupportedToken(address _token) external onlyManager {\n        require(isSupportedToken[_token], \"TOKEN_DOES_NOT_EXIST\");\n        isSupportedToken[_token] = false;\n        emit TokenRemoved(_token, msg.sender, block.timestamp);\n    }\n\n    /// @notice adds address to list of owners\n    /// @param _manager any ethereum account\n    function addManager(address _manager) external onlyManager {\n        require(!isManager[_manager], \"MANAGER_ALREADY_EXISTS\");\n        isManager[_manager] = true;\n        emit ManagerAdded(_manager, msg.sender, block.timestamp);\n    }\n\n    /// @notice removes address from list of owners\n    /// @param _manager any active manager\n    function removeManager(address _manager) external onlyManager {\n        require(isManager[_manager], \"MANAGER_DOES_NOT_EXIST\");\n        isManager[_manager] = false;\n        emit ManagerRemoved(_manager, msg.sender, block.timestamp);\n    }\n}\n"
    },
    "contracts/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface ITreasury {\n    function payRewards(\n        address _user,\n        address _token,\n        uint256 _deposit\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/JetStakingV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"./ITreasury.sol\";\nimport \"./AdminControlled.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\n/**\n * @title JetStakingV1\n * @author Aurora Team\n *\n * @dev Implementation of Jet staking contract\n *\n *      This contract implements the staking mechanics for AURORA ERC20 token.\n *      A user can stake any amount of AURORA tokens, and get rewarded in both\n *      AURORA and other stream tokens based on the rewards schedules.\n *      Stream rewards can be claimed any time however AURORA can't be claimed\n *      unless the user unstakes his full/partial amount of shares.\n *\n *      This contract is AdminControlled which has a tremendous power. However\n *      hopfully it be governed by a community wallet.\n */\ncontract JetStakingV1 is AdminControlled {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    uint256 constant ONE_MONTH = 2629746;\n    uint256 constant FOUR_YEARS = 126227704;\n    // RPS_MULTIPLIER = Aurora_max_supply x weight(1000) * 10 (large enough to always release rewards) =\n    // 10**9 * 10**18 * 10**3 * 10= 10**31\n    uint256 constant RPS_MULTIPLIER = 1e31;\n    uint256 public totalAmountOfStakedAurora;\n    uint256 public touchedAt;\n    uint256 public totalAuroraShares;\n    uint256 public totalStreamShares;\n    address public treasury;\n    address public auroraToken;\n\n    struct User {\n        uint256 deposit;\n        uint256 auroraShares;\n        uint256 streamShares;\n        mapping(uint256 => uint256) pendings; // The amount of tokens pending release for user per stream\n        mapping(uint256 => uint256) releaseTime; // The release moment per stream\n        mapping(uint256 => uint256) rpsDuringLastWithdrawal; // RPS or reward per share during the previous withdrawal\n    }\n\n    struct Schedule {\n        uint256[] time;\n        uint256[] reward;\n    }\n\n    struct Stream {\n        address streamOwner;\n        address rewardToken;\n        uint256 auroraDepositAmount;\n        uint256 auroraClaimedAmount;\n        uint256 rewardDepositAmount;\n        uint256 rewardClaimedAmount;\n        uint256 maxDepositAmount;\n        uint256 lastTimeOwnerClaimed;\n        uint256 tau;\n        uint256 rps; // Reward per share for a stream j>0\n        Schedule schedule;\n        bool isProposed;\n        bool isActive;\n    }\n\n    mapping(address => User) users;\n    mapping(address => uint256) public streamToIndex;\n    Stream[] streams;\n\n    // events\n    event Staked(\n        address indexed user,\n        uint256 amount,\n        uint256 shares,\n        uint256 timestamp\n    );\n\n    event Unstaked(address indexed user, uint256 amount, uint256 timestamp);\n\n    event Pending(\n        uint256 indexed streamId,\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event Released(\n        uint256 indexed streamId,\n        address indexed user,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    event StreamProposed(\n        uint256 indexed streamId,\n        address indexed owner,\n        uint256 timestamp\n    );\n\n    event StreamProposalCancelled(\n        uint256 indexed streamId,\n        address indexed owner,\n        uint256 timestamp\n    );\n\n    event StreamCreated(\n        uint256 indexed streamId,\n        address indexed owner,\n        uint256 timestamp\n    );\n\n    event StreamRemoved(\n        uint256 indexed streamId,\n        address indexed owner,\n        uint256 timestamp\n    );\n\n    modifier onlyActiveStream(uint256 streamId) {\n        require(streams[streamId].isActive, \"INACTIVE_STREAM\");\n        _;\n    }\n\n    /// @dev initialize the contract and deploys the first stream (AURORA)\n    /// @param aurora token contract address\n    /// @param scheduleTimes init the schedule time\n    /// @param scheduleRewards init the schedule amounts\n    /// @param tauAuroraStream release time constant per stream (e.g AURORA stream)\n    /// @param _flags admin controlled contract flags\n    /// @param _treasury the Aurora treasury contract address\n    function initialize(\n        address aurora,\n        uint256[] memory scheduleTimes,\n        uint256[] memory scheduleRewards,\n        uint256 tauAuroraStream,\n        uint256 _flags,\n        address _treasury\n    ) external initializer {\n        require(\n            aurora != address(0) && _treasury != address(0),\n            \"INVALID_ADDRESS\"\n        );\n        __AdminControlled_init(_flags);\n\n        treasury = _treasury;\n        auroraToken = aurora;\n        //init AURORA default stream\n        uint256 streamId = 0;\n        streams.push();\n        Stream storage stream = streams[streamId];\n        stream.streamOwner = msg.sender;\n        stream.rewardToken = aurora;\n        stream.auroraDepositAmount = 0;\n        stream.auroraClaimedAmount = 0;\n        stream.maxDepositAmount = 0;\n        stream.rewardDepositAmount = 0;\n        stream.rewardClaimedAmount = 0;\n        stream.lastTimeOwnerClaimed = block.timestamp;\n        stream.schedule = Schedule(scheduleTimes, scheduleRewards);\n        stream.isProposed = true;\n        stream.isActive = true;\n        stream.tau = tauAuroraStream;\n        emit StreamProposed(streamId, msg.sender, block.timestamp);\n        emit StreamCreated(streamId, msg.sender, block.timestamp);\n    }\n\n    /// @dev An admin of the staking contract can whitelist a stream.\n    ///Whitelisting of the stream provides the option for the stream\n    ///creator (presumably the issuing party of a specific token) to\n    ///deposit some ERC-20 tokens on the staking contract and potentially\n    ///get in return some AURORA tokens. Deposited ERC-20 tokens will be\n    ///distributed to the stakers over some period of time.\n    /// @param streamOwner only this account would be able to create a stream\n    /// @param rewardToken the address of the ERC-20 tokens to be deposited in the stream\n    /// @param auroraDepositAmount Amount of the AURORA deposited by the Admin.\n    /// @param maxDepositAmount The upper amount of the tokens that should be deposited by the stream owner\n    /// @param scheduleTimes array of block heights for each schedule time\n    /// @param scheduleRewards array of reward amounts that are kept on the staking contract at each block height\n    /// @param tau the tau is (pending release period) for this stream (e.g one day)\n    function proposeStream(\n        address streamOwner,\n        address rewardToken,\n        uint256 auroraDepositAmount,\n        uint256 maxDepositAmount,\n        uint256[] memory scheduleTimes,\n        uint256[] memory scheduleRewards,\n        uint256 tau\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _validateStreamParameters(\n            streamOwner,\n            rewardToken,\n            auroraDepositAmount,\n            maxDepositAmount,\n            scheduleTimes,\n            scheduleRewards,\n            tau\n        );\n        uint256 streamId = streams.length;\n        streams.push();\n        Stream storage stream = streams[streamId];\n        stream.streamOwner = streamOwner;\n        stream.rewardToken = rewardToken;\n        stream.auroraDepositAmount = auroraDepositAmount;\n        stream.auroraClaimedAmount = 0;\n        stream.maxDepositAmount = maxDepositAmount;\n        stream.rewardDepositAmount = 0;\n        stream.rewardClaimedAmount = 0;\n        stream.lastTimeOwnerClaimed = scheduleTimes[0];\n        stream.schedule = Schedule(scheduleTimes, scheduleRewards);\n        stream.isProposed = true;\n        stream.isActive = false;\n        stream.tau = tau;\n        emit StreamProposed(streamId, streamOwner, block.timestamp);\n        IERC20Upgradeable(auroraToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            auroraDepositAmount\n        );\n    }\n\n    /// @dev cancelStreamProposal should only called if the stream owner\n    /// never created the stream after the proposal expiry date.\n    /// @param streamId the stream index\n    function cancelStreamProposal(uint256 streamId)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        Stream storage stream = streams[streamId];\n        require(\n            streams[streamId].schedule.time[0] < block.timestamp &&\n                stream.isProposed,\n            \"STREAM_DID_NOT_EXPIRE\"\n        );\n        // cancel the proposal\n        stream.isProposed = false;\n        uint256 refundAmount = stream.auroraDepositAmount;\n        stream.auroraDepositAmount = 0;\n        emit StreamProposalCancelled(\n            streamId,\n            stream.streamOwner,\n            block.timestamp\n        );\n        // refund admin wallet with the stream aurora deposit\n        IERC20Upgradeable(auroraToken).safeTransfer(superAdmin, refundAmount);\n    }\n\n    /// @dev create new stream (only stream owner)\n    /// stream owner must approve reward tokens to this contract.\n    /// @param streamId stream id\n    function createStream(uint256 streamId, uint256 rewardTokenAmount)\n        external\n        pausable(1)\n    {\n        Stream storage stream = streams[streamId];\n        require(stream.isProposed, \"STREAM_NOT_PROPOSED\");\n        require(stream.streamOwner == msg.sender, \"INVALID_STREAM_OWNER\");\n        require(!stream.isActive, \"STREAM_ALREADY_EXISTS\");\n        require(\n            stream.schedule.time[0] >= block.timestamp,\n            \"STREAM_PROPOSAL_EXPIRED\"\n        );\n        stream.isActive = true;\n        stream.rewardDepositAmount = rewardTokenAmount;\n        emit StreamCreated(streamId, msg.sender, block.timestamp);\n        if (rewardTokenAmount < stream.maxDepositAmount) {\n            // refund staking admin if deposited reward tokens less than the upper limit of deposit\n            uint256 refundAuroraAmount = ((stream.maxDepositAmount -\n                rewardTokenAmount) * stream.auroraDepositAmount) /\n                stream.maxDepositAmount;\n            stream.auroraDepositAmount -= refundAuroraAmount;\n            // update stream reward schedules\n            _updateStreamRewardSchedules(streamId, rewardTokenAmount);\n            IERC20Upgradeable(auroraToken).safeTransfer(\n                superAdmin,\n                refundAuroraAmount\n            );\n        }\n        // move Aurora tokens to treasury\n        IERC20Upgradeable(auroraToken).safeTransfer(\n            address(treasury),\n            stream.auroraDepositAmount\n        );\n        // move reward tokens to treasury\n        IERC20Upgradeable(stream.rewardToken).safeTransferFrom(\n            msg.sender,\n            address(treasury),\n            rewardTokenAmount\n        );\n    }\n\n    /// @dev Get the treasury balance\n    /// @param token the token address\n    function getTreasuryBalance(address token) public view returns (uint256) {\n        return IERC20Upgradeable(token).balanceOf(treasury);\n    }\n\n    /// @dev removes a stream (only admin role)\n    /// @param streamId contract address\n    /// @param streamFundReceiver receives the rest of the reward tokens in the stream\n    function removeStream(uint256 streamId, address streamFundReceiver)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(streamId != 0, \"AURORA_NOT_REMOVABLE\");\n        Stream storage stream = streams[streamId];\n        require(stream.isActive, \"STREAM_ALREADY_REMOVED\");\n        stream.isActive = false;\n        stream.isProposed = false;\n        emit StreamRemoved(streamId, stream.streamOwner, block.timestamp);\n        uint256 releaseAuroraAmount = stream.auroraDepositAmount -\n            stream.auroraClaimedAmount;\n        uint256 releaseRewardAmount = stream.rewardDepositAmount -\n            stream.rewardClaimedAmount;\n        // check enough treasury balance\n        uint256 auroraTreasury = getTreasuryBalance(auroraToken);\n        uint256 rewardTreasury = getTreasuryBalance(stream.rewardToken);\n        // move rest of the unclaimed aurora to the admin\n        ITreasury(treasury).payRewards(\n            superAdmin,\n            auroraToken,\n            releaseAuroraAmount <= auroraTreasury\n                ? releaseAuroraAmount\n                : auroraTreasury // should not happen\n        );\n        // move the rest of rewards to the stream owner\n        ITreasury(treasury).payRewards(\n            streamFundReceiver,\n            stream.rewardToken,\n            releaseRewardAmount <= rewardTreasury\n                ? releaseRewardAmount\n                : rewardTreasury // should not happen\n        );\n    }\n\n    /// @dev Stream owner claimable AURORA.\n    /// @param streamId the stream index\n    function getStreamOwnerClaimableAmount(uint256 streamId)\n        public\n        view\n        returns (uint256)\n    {\n        Stream storage stream = streams[streamId];\n        if (!stream.isActive) return 0;\n        uint256 scheduledReward = rewardsSchedule(\n            streamId,\n            stream.lastTimeOwnerClaimed,\n            block.timestamp\n        );\n        return\n            (scheduledReward * stream.auroraDepositAmount) /\n            stream.rewardDepositAmount;\n    }\n\n    /// @dev the release of AURORA tokens to the stream creator is subjected to the same schedule as rewards.\n    /// Thus if for a specific moment in time 30% of the rewards are distributed, then it means that 30% of\n    /// the AURORA deposit can be withdrawn by the stream creator too.\n    /// called by the stream owner\n    /// @param streamId the stream index\n    function releaseAuroraRewardsToStreamOwner(uint256 streamId)\n        external\n        pausable(1)\n    {\n        Stream storage stream = streams[streamId];\n        require(msg.sender == stream.streamOwner, \"INVALID_STREAM_OWNER\");\n        require(stream.isActive, \"INACTIVE_STREAM\");\n        uint256 auroraStreamOwnerReward = getStreamOwnerClaimableAmount(\n            streamId\n        );\n        stream.lastTimeOwnerClaimed = block.timestamp;\n        stream.auroraClaimedAmount += auroraStreamOwnerReward;\n        // check enough treasury balance\n        ITreasury(treasury).payRewards(\n            stream.streamOwner,\n            auroraToken,\n            auroraStreamOwnerReward\n        );\n    }\n\n    /// @dev get the stream data\n    /// @param streamId the stream index\n    function getStream(uint256 streamId)\n        external\n        view\n        returns (\n            address streamOwner,\n            address rewardToken,\n            uint256 auroraDepositAmount,\n            uint256 rewardDepositAmount,\n            uint256 maxDepositAmount,\n            uint256 tau,\n            bool isProposed,\n            bool isActive\n        )\n    {\n        Stream storage stream = streams[streamId];\n        return (\n            stream.streamOwner,\n            stream.rewardToken,\n            stream.auroraDepositAmount,\n            stream.rewardDepositAmount,\n            stream.maxDepositAmount,\n            stream.tau,\n            stream.isProposed,\n            stream.isActive\n        );\n    }\n\n    /// @dev get the streams count\n    /// @return streams.length\n    function getStreamsCount() external view returns (uint256) {\n        return streams.length;\n    }\n\n    /// @notice updates treasury account\n    /// @dev restricted for the admin only\n    /// @param _treasury treasury contract address for the reward tokens\n    function updateTreasury(address _treasury)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        //TODO: should pause this contract before changing the treasury contract address.\n        require(_treasury != address(0), \"INVALID_ADDRESS\");\n        treasury = _treasury;\n    }\n\n    /// @dev batchStakeOnBehalfOfOtherUsers called for airdropping Aurora users\n    /// @param accounts the account address\n    /// @param amounts in AURORA tokens\n    /// @param batchAmount equals to the sum of amounts\n    function batchStakeOnBehalfOfOtherUsers(\n        address[] memory accounts,\n        uint256[] memory amounts,\n        uint256 batchAmount\n    ) external pausable(1) {\n        require(accounts.length == amounts.length, \"INVALID_ARRAY_LENGTH\");\n        uint256 totalAmount = 0;\n        for (uint256 i = 0; i < amounts.length; i++) {\n            totalAmount += amounts[i];\n            _stakeOnBehalfOfAnotherUser(accounts[i], amounts[i]);\n        }\n        require(totalAmount == batchAmount, \"INVALID_BATCH_AMOUNT\");\n        IERC20Upgradeable(auroraToken).safeTransferFrom(\n            msg.sender,\n            address(treasury),\n            batchAmount\n        );\n    }\n\n    /// @dev stakeOnBehalfOfAnotherUser is called for airdropping Aurora users\n    /// @param account the account address\n    /// @param amount in AURORA tokens\n    function stakeOnBehalfOfAnotherUser(address account, uint256 amount)\n        external\n        pausable(1)\n    {\n        _stakeOnBehalfOfAnotherUser(account, amount);\n        IERC20Upgradeable(auroraToken).safeTransferFrom(\n            msg.sender,\n            address(treasury),\n            amount\n        );\n    }\n\n    /// @dev moves the reward for specific stream Id to pending rewards.\n    /// It will require a waiting time untill it get released. Users call\n    /// this in function in order to claim rewards.\n    /// @param streamId stream index\n    function moveRewardsToPending(uint256 streamId)\n        external\n        pausable(1)\n        onlyActiveStream(streamId)\n    {\n        _before();\n        _moveRewardsToPending(msg.sender, streamId);\n    }\n\n    /// @dev moves all the user rewards to pending reward.\n    function moveAllRewardsToPending() external pausable(1) {\n        _before();\n        // Claim all streams while skipping inactive streams.\n        _moveAllRewardsToPending(msg.sender);\n    }\n\n    /// @dev a user stakes amount of AURORA tokens\n    /// The user should approve these tokens to the treasury\n    /// contract in order to complete the stake.\n    /// @param amount is the AURORA amount.\n    function stake(uint256 amount) external pausable(1) {\n        _before();\n        _stake(msg.sender, amount);\n        IERC20Upgradeable(auroraToken).safeTransferFrom(\n            msg.sender,\n            address(treasury),\n            amount\n        );\n    }\n\n    /// @dev withdraw amount in the pending. User should wait for\n    /// pending time (tau constant) in order to be able to withdraw.\n    /// @param streamId stream index\n    function withdraw(uint256 streamId) external pausable(1) {\n        require(\n            block.timestamp > users[msg.sender].releaseTime[streamId],\n            \"INVALID_RELEASE_TIME\"\n        );\n        _withdraw(streamId);\n    }\n\n    /// @dev withdraw all claimed balances which have passed pending periode.\n    /// This function will reach gas limit with too many streams,\n    /// so the frontend will allow individual stream withdrawals and disable withdrawAll.\n    function withdrawAll() external pausable(1) {\n        User storage userAccount = users[msg.sender];\n        for (uint256 i = 0; i < streams.length; i++) {\n            if (\n                userAccount.pendings[i] != 0 &&\n                block.timestamp > userAccount.releaseTime[i]\n            ) {\n                _withdraw(i);\n            }\n        }\n    }\n\n    /// @dev gets the total user deposit\n    /// @param account the user address\n    /// @return user total deposit in (AURORA)\n    function getUserTotalDeposit(address account)\n        external\n        view\n        returns (uint256)\n    {\n        return users[account].deposit;\n    }\n\n    /// @dev gets the user shares\n    /// @param account the user address\n    /// @return user shares\n    function getUserShares(address account) external view returns (uint256) {\n        return users[account].auroraShares;\n    }\n\n    /// @dev unstake amount from user shares value. The rest is re-staked\n    /// @param amount to unstake\n    function unstake(uint256 amount) external pausable(1) {\n        _before();\n        uint256 stakeValue = (totalAmountOfStakedAurora *\n            users[msg.sender].auroraShares) / totalAuroraShares;\n        _unstake(amount, stakeValue);\n    }\n\n    /// @dev unstake all the user's shares\n    function unstakeAll() external pausable(1) {\n        _before();\n        uint256 stakeValue = (totalAmountOfStakedAurora *\n            users[msg.sender].auroraShares) / totalAuroraShares;\n        _unstake(stakeValue, stakeValue);\n    }\n\n    /// @dev gets a user stream shares\n    /// @param streamId stream index\n    /// @param account the user address\n    /// @return user stream shares\n    function getAmountOfShares(uint256 streamId, address account)\n        external\n        view\n        returns (uint256)\n    {\n        if (streamId == 0) return users[account].auroraShares;\n        return users[account].streamShares;\n    }\n\n    /// @dev gets reward per share (RPS) for a stream\n    /// @param streamId stream index\n    /// @return streams[streamId].rps\n    function getRewardPerShare(uint256 streamId)\n        external\n        view\n        returns (uint256)\n    {\n        return streams[streamId].rps;\n    }\n\n    /// @dev calculates and gets the latest released rewards.\n    /// @param streamId stream index\n    /// @return rewards released since last update.\n    function getRewardsAmount(uint256 streamId) public view returns (uint256) {\n        uint256 streamStart = streams[streamId].schedule.time[0];\n        if (block.timestamp <= streamStart) return 0; // Stream didn't start\n        uint256 streamEnd = streams[streamId].schedule.time[\n            streams[streamId].schedule.time.length - 1\n        ];\n        if (touchedAt >= streamEnd) return 0; // Stream schedule ended, all rewards released\n        uint256 start;\n        uint256 end;\n        if (touchedAt > streamStart) {\n            start = touchedAt;\n        } else {\n            // Release rewards from stream start.\n            start = streams[streamId].schedule.time[0];\n        }\n        if (block.timestamp < streamEnd) {\n            end = block.timestamp;\n        } else {\n            // The stream already finished between the last update and now.\n            end = streamEnd;\n        }\n        return rewardsSchedule(streamId, start, end);\n    }\n\n    /// @dev calculates and gets the latest reward per share (RPS) for a stream\n    /// @param streamId stream index\n    /// @return streams[streamId].rps + scheduled reward up till now\n    function getLatestRewardPerShare(uint256 streamId)\n        public\n        view\n        returns (uint256)\n    {\n        require(streamId != 0, \"AURORA_REWARDS_COMPOUND\");\n        require(totalStreamShares != 0, \"ZERO_STREAM_SHARES\");\n        return\n            streams[streamId].rps +\n            (getRewardsAmount(streamId) * RPS_MULTIPLIER) /\n            totalStreamShares;\n    }\n\n    /// @dev gets the user's reward per share (RPS) for a stream\n    /// @param streamId stream index\n    /// @return user.rpsDuringLastWithdrawal[streamId]\n    function getRewardPerShareForUser(uint256 streamId, address account)\n        external\n        view\n        returns (uint256)\n    {\n        return users[account].rpsDuringLastWithdrawal[streamId];\n    }\n\n    /// @dev gets the user's stream claimable amount\n    /// @param streamId stream index\n    /// @return (latesRPS - user.rpsDuringLastWithdrawal) * user.shares\n    function getStreamClaimableAmount(uint256 streamId, address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 latestRps = getLatestRewardPerShare(streamId);\n        User storage userAccount = users[account];\n        uint256 userRps = userAccount.rpsDuringLastWithdrawal[streamId];\n        uint256 userShares = userAccount.streamShares;\n        return ((latestRps - userRps) * userShares) / RPS_MULTIPLIER;\n    }\n\n    /// @dev gets the user's stream pending reward\n    /// @param streamId stream index\n    /// @param account user account\n    /// @return user.pendings[streamId]\n    function getPending(uint256 streamId, address account)\n        external\n        view\n        returns (uint256)\n    {\n        return users[account].pendings[streamId];\n    }\n\n    /// @dev gets the user's stream reward release time\n    /// @param streamId stream index\n    /// @param account user account\n    /// @return user.releaseTime[streamId]\n    function getReleaseTime(uint256 streamId, address account)\n        external\n        view\n        returns (uint256)\n    {\n        return users[account].releaseTime[streamId];\n    }\n\n    /// @dev gets the stream schedule time and reward\n    /// @param streamId stream index\n    /// @return schedule.time, schedule.reward\n    function getSchedule(uint256 streamId)\n        external\n        view\n        returns (uint256[] memory, uint256[] memory)\n    {\n        return (\n            streams[streamId].schedule.time,\n            streams[streamId].schedule.reward\n        );\n    }\n\n    /// @dev gets the total amount of staked aurora\n    /// @return totalAmountOfStakedAurora + latest reward schedule\n    function getTotalAmountOfStakedAurora() external view returns (uint256) {\n        if (touchedAt == 0) return 0;\n        return\n            totalAmountOfStakedAurora +\n            rewardsSchedule(0, touchedAt, block.timestamp);\n    }\n\n    /// @dev gets start index and end index in a stream schedule\n    /// @param streamId stream index\n    /// @param start start time (in seconds)\n    /// @param end end time (in seconds)\n    function startEndScheduleIndex(\n        uint256 streamId,\n        uint256 start,\n        uint256 end\n    ) public view returns (uint256 startIndex, uint256 endIndex) {\n        Schedule storage schedule = streams[streamId].schedule;\n        require(schedule.time.length > 0, \"NO_SCHEDULE\");\n        require(\n            end > start &&\n                start >= schedule.time[0] &&\n                end <= schedule.time[schedule.time.length - 1],\n            \"INVALID_SCHEDULE_PARAMETERS\"\n        );\n        // find start index and end index\n        for (uint256 i = 0; i < schedule.time.length - 1; i++) {\n            if (start < schedule.time[i]) {\n                startIndex = i - 1;\n                break;\n            }\n        }\n\n        for (uint256 i = schedule.time.length - 1; i > 0; i--) {\n            if (end >= schedule.time[i]) {\n                endIndex = i;\n                break;\n            }\n        }\n    }\n\n    /// @dev calculate the total amount of the released tokens within a period (start & end)\n    /// @param streamId the stream index\n    /// @param start is the start timestamp within the schedule\n    /// @param end is the end timestamp (e.g block.timestamp .. now)\n    /// @return amount of the released tokens for that period\n    function rewardsSchedule(\n        uint256 streamId,\n        uint256 start,\n        uint256 end\n    ) public view returns (uint256) {\n        uint256 startIndex;\n        uint256 endIndex;\n        (startIndex, endIndex) = startEndScheduleIndex(streamId, start, end);\n        Schedule storage schedule = streams[streamId].schedule;\n        uint256 rewardScheduledAmount = 0;\n        uint256 reward = 0;\n        if (startIndex == endIndex) {\n            // start and end are within the same schedule period\n            reward =\n                schedule.reward[startIndex] -\n                schedule.reward[startIndex + 1];\n            rewardScheduledAmount =\n                (reward * (end - start)) /\n                (schedule.time[startIndex + 1] - schedule.time[startIndex]);\n        } else {\n            // start and end are not within the same schedule period\n            // Reward during the startIndex period\n            reward = (schedule.reward[startIndex] -\n                schedule.reward[startIndex + 1]);\n            rewardScheduledAmount =\n                (reward * (schedule.time[startIndex + 1] - start)) /\n                (schedule.time[startIndex + 1] - schedule.time[startIndex]);\n            // Reward during the period from startIndex + 1  to endIndex - 1\n            for (uint256 i = startIndex + 1; i < endIndex; i++) {\n                reward = schedule.reward[i] - schedule.reward[i + 1];\n                rewardScheduledAmount += reward;\n            }\n            // Reward during the endIndex period\n            if (end > schedule.time[endIndex]) {\n                reward =\n                    schedule.reward[endIndex] -\n                    schedule.reward[endIndex + 1];\n                rewardScheduledAmount +=\n                    (reward * (end - schedule.time[endIndex])) /\n                    (schedule.time[startIndex + 1] - schedule.time[startIndex]);\n            }\n        }\n        return rewardScheduledAmount;\n    }\n\n    /// @dev called before touching the contract reserves (stake/unstake)\n    function _before() internal {\n        if (touchedAt == block.timestamp) return; // Already updated by previous tx in same block.\n        if (totalAuroraShares != 0) {\n            // Don't release rewards if there are no stakers.\n            totalAmountOfStakedAurora += getRewardsAmount(0);\n            for (uint256 i = 1; i < streams.length; i++) {\n                if (streams[i].isActive) {\n                    // If stream becomes blacklisted, no more rewards are released.\n                    streams[i].rps = getLatestRewardPerShare(i);\n                }\n            }\n        }\n        touchedAt = block.timestamp;\n    }\n\n    /// @dev internal function for airdropping Aurora users\n    /// @param account the account address\n    /// @param amount in AURORA tokens\n    function _stakeOnBehalfOfAnotherUser(address account, uint256 amount)\n        internal\n    {\n        _before();\n        _stake(account, amount);\n    }\n\n    /// @dev calculate the weighted stream shares at given timeshamp.\n    /// @param timestamp the timestamp refering to the current or older timestamp\n    function _weightedShares(uint256 shares, uint256 timestamp)\n        private\n        view\n        returns (uint256)\n    {\n        uint256 maxWeight = 1024;\n        uint256 minWeight = 256;\n        uint256 slopeStart = streams[0].schedule.time[0] + ONE_MONTH;\n        uint256 slopeEnd = slopeStart + FOUR_YEARS;\n        if (timestamp <= slopeStart) return shares * maxWeight;\n        if (timestamp >= slopeEnd) return shares * minWeight;\n        return\n            (shares * (maxWeight - minWeight) * (slopeEnd - timestamp)) /\n            (slopeEnd - slopeStart);\n    }\n\n    /// @dev allocate the collected reward to the pending tokens\n    /// @notice TODO: potentially withdraw the released rewards if any\n    /// @param account is the staker address\n    /// @param streamId the stream index\n    function _moveRewardsToPending(address account, uint256 streamId) private {\n        require(streamId != 0, \"AURORA_REWARDS_COMPOUND\");\n        User storage userAccount = users[account];\n        uint256 reward = ((streams[streamId].rps -\n            userAccount.rpsDuringLastWithdrawal[streamId]) *\n            userAccount.streamShares) / RPS_MULTIPLIER;\n        if (reward == 0) return; // All rewards claimed or stream schedule didn't start\n        userAccount.pendings[streamId] += reward;\n        userAccount.rpsDuringLastWithdrawal[streamId] = streams[streamId].rps;\n        userAccount.releaseTime[streamId] =\n            block.timestamp +\n            streams[streamId].tau;\n        // If the stream is blacklisted, remaining unclaimed rewards will be transfered out.\n        streams[streamId].rewardClaimedAmount += reward;\n        emit Pending(\n            streamId,\n            account,\n            userAccount.pendings[streamId],\n            block.timestamp\n        );\n    }\n\n    /// @dev move all the streams rewards for a user to the pending tokens\n    /// @param account is the staker address\n    function _moveAllRewardsToPending(address account) private {\n        for (uint256 i = 1; i < streams.length; i++) {\n            if (streams[i].isActive) _moveRewardsToPending(account, i);\n        }\n    }\n\n    /// @dev calculate the shares for a user per AURORA stream and other streams\n    /// @param amount the staked amount\n    function _stake(address account, uint256 amount) private {\n        // recalculation of shares for user\n        User storage userAccount = users[account];\n        uint256 _amountOfShares = 0;\n        if (totalAuroraShares == 0) {\n            // initialize the number of shares (_amountOfShares) owning 100% of the stake (amount)\n            _amountOfShares = amount;\n        } else {\n            // Round up (+1) so users don't get less sharesValue than their staked amount\n            _amountOfShares =\n                (amount * totalAuroraShares) /\n                totalAmountOfStakedAurora +\n                1;\n        }\n        if (userAccount.auroraShares != 0) {\n            // move rewards to pending: new shares should not claim previous rewards.\n            _moveAllRewardsToPending(account);\n        }\n        userAccount.auroraShares += _amountOfShares;\n        totalAuroraShares += _amountOfShares;\n        totalAmountOfStakedAurora += amount;\n        userAccount.deposit += amount;\n\n        // Calculate stream shares\n        uint256 weightedAmountOfSharesPerStream = _weightedShares(\n            _amountOfShares,\n            block.timestamp\n        );\n        totalStreamShares += weightedAmountOfSharesPerStream;\n        userAccount.streamShares += weightedAmountOfSharesPerStream;\n        for (uint256 i = 1; i < streams.length; i++) {\n            userAccount.rpsDuringLastWithdrawal[i] = streams[i].rps; // The new shares should not claim old rewards\n        }\n        emit Staked(account, amount, _amountOfShares, block.timestamp);\n    }\n\n    function _unstake(uint256 amount, uint256 stakeValue) internal {\n        require(amount != 0, \"ZERO_AMOUNT\");\n        require(amount <= stakeValue, \"NOT_ENOUGH_STAKE_BALANCE\");\n        User storage userAccount = users[msg.sender];\n        // move rewards to pending\n        _moveAllRewardsToPending(msg.sender);\n        // remove the shares from everywhere\n        totalAuroraShares -= userAccount.auroraShares;\n        totalStreamShares -= userAccount.streamShares;\n        userAccount.auroraShares = 0;\n        userAccount.streamShares = 0;\n        // update the total Aurora staked and deposits\n        totalAmountOfStakedAurora -= stakeValue;\n        userAccount.deposit = 0;\n        // move unstaked AURORA to pending.\n        userAccount.pendings[0] += amount;\n        userAccount.releaseTime[0] = block.timestamp + streams[0].tau;\n        emit Pending(0, msg.sender, userAccount.pendings[0], block.timestamp);\n        emit Unstaked(msg.sender, amount, block.timestamp);\n        // restake the rest\n        uint256 amountToRestake = stakeValue - amount;\n        if (amountToRestake > 0) {\n            _stake(msg.sender, amountToRestake);\n        }\n    }\n\n    /// @dev validates the stream parameters prior proposing it.\n    /// @param streamOwner stream owner address\n    /// @param rewardToken stream reward token address\n    /// @param auroraDepositAmount the amount of Aurora token deposit by the admi.\n    /// @param maxDepositAmount the max reward token deposit\n    /// @param scheduleTimes the stream schedule time list\n    /// @param scheduleRewards the stream schedule reward list\n    /// @param tau the tau is (pending release period) for this stream (e.g one day)\n    function _validateStreamParameters(\n        address streamOwner,\n        address rewardToken,\n        uint256 auroraDepositAmount,\n        uint256 maxDepositAmount,\n        uint256[] memory scheduleTimes,\n        uint256[] memory scheduleRewards,\n        uint256 tau\n    ) private view {\n        require(streamOwner != address(0), \"INVALID_STREAM_OWNER_ADDRESS\");\n        require(rewardToken != address(0), \"INVALID_REWARD_TOKEN_ADDRESS\");\n        require(\n            auroraDepositAmount <= maxDepositAmount,\n            \"INVALID_DEPOSITED_AURORA_PARAMETERS\"\n        );\n        // scheduleTimes[0] == proposal expiration time\n        require(\n            scheduleTimes[0] > block.timestamp,\n            \"INVALID_STREAM_EXPIRATION_DATE\"\n        );\n        require(\n            scheduleTimes.length == scheduleRewards.length,\n            \"INVALID_SCHEDULE_VALUES\"\n        );\n        require(tau != 0, \"INVALID_TAU_PERIOD\");\n    }\n\n    /// @dev updates the stream reward schedule if the reward token amount is less than\n    /// the max deposit amount.\n    /// @param streamId the stream index\n    /// @param rewardTokenAmount the stream reward token amount\n    function _updateStreamRewardSchedules(\n        uint256 streamId,\n        uint256 rewardTokenAmount\n    ) private {\n        for (uint256 i = 0; i < streams[streamId].schedule.reward.length; i++) {\n            if (i == 0) {\n                streams[streamId].schedule.reward[i] = rewardTokenAmount;\n            } else if (i == streams[streamId].schedule.reward.length - 1) {\n                streams[streamId].schedule.reward[i] = 0;\n            } else {\n                streams[streamId].schedule.reward[i] =\n                    streams[streamId].schedule.reward[i - 1] /\n                    2;\n            }\n        }\n    }\n\n    function _withdraw(uint256 streamId) internal {\n        User storage userAccount = users[msg.sender];\n        uint256 pendingAmount = userAccount.pendings[streamId];\n        userAccount.pendings[streamId] = 0;\n        emit Released(streamId, msg.sender, pendingAmount, block.timestamp);\n        ITreasury(treasury).payRewards(\n            msg.sender,\n            streams[streamId].rewardToken,\n            pendingAmount\n        );\n    }\n}\n"
    },
    "contracts/testing/JetStakingTesting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\nimport \"../JetStakingV1.sol\";\n\ncontract JetStakingTesting is JetStakingV1 {\n    function before(uint256 startTime, uint256 endTime)\n        public\n        view\n        returns (\n            uint256 total,\n            uint256 rewardPerShareAurora,\n            uint256 scheduleCalculated\n        )\n    {\n        total = rewardsSchedule(0, startTime, endTime);\n        scheduleCalculated =\n            rewardsSchedule(0, startTime, endTime) /\n            1000000000000000000;\n        if (totalAuroraShares != 0) {\n            rewardPerShareAurora = total / (totalAuroraShares);\n        } else {\n            rewardPerShareAurora = total;\n        }\n    }\n\n    function updateUserCalculation() external {\n        _before();\n    }\n\n    function getTotalUserReward() external view returns (uint256 totalReward) {\n        totalReward =\n            users[msg.sender].auroraShares *\n            (totalAmountOfStakedAurora / totalAuroraShares);\n    }\n\n    function calculateReward(address account) public view returns (uint256) {\n        uint256 userShares = users[account].auroraShares;\n        return (totalAmountOfStakedAurora * userShares) / totalAuroraShares;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}